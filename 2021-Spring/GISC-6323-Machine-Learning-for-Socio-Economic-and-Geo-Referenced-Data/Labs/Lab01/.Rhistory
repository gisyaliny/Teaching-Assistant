source('G:/UTD_Classes/Teaching-Assistant/2021-Spring/GISC-6323-Machine-Learning-for-Socio-Economic-and-Geo-Referenced-Data/Labs/Task03Code.R')
source('G:/UTD_Classes/Teaching-Assistant/2021-Spring/GISC-6323-Machine-Learning-for-Socio-Economic-and-Geo-Referenced-Data/Labs/Task03Code.R')
?near
sqrt(2) ^ 2 == 2
near(sqrt(2) ^ 2, 2)
library(tidyverse)
library(nycflights13)
sqrt(2) ^ 2 == 2
near(sqrt(2) ^ 2, 2)
.Machine$double.eps^0.5
data("flights")
force(flights)
View(flights)
flights %>% filter(arr_delay>3)
?flights
flights %>% filter((arr_delay>=3*60) & (dest in c('DFW','DAL')))
flights %>% filter((arr_delay>=3*60) & (dest %in% c('DFW','DAL')))
flights %>% arrange(is.na(flights))
flights %>% arrange(!is.na(flights))
?select
flights %>% select((arr_delay>=3*60),(dest %in% c('DFW','DAL')))
flights %>% select(arr_delay,dest,last_col)
?mute
??mute
??rank
flights %>% group_by(carrier, dest) %>% summarize(n( ))
?group_by
?flights
flights %>%
group_by(carrier, dep_delay) %>% summarize(n( ))
flights %>%
group_by(carrier, dep_delay) %>% summarize(mean( ))
flights %>%
group_by(dep_delay,carrier ) %>% summarize(mean( ))
flights %>%
group_by(carrier, dep_delay) %>% summarize(mean( ))
flights %>% group_by(carrier, dest) %>% summarize(n( )).
flights %>% group_by(carrier, dest) %>% summarize(n( ))
?group_by
flights %>% group_by(carrier) %>% summarize(n( ))
?flights
flights %>% group_by(carrier) %>%
mutate(avg_dep_delay = mean(dep_delay),avg_arr_delay = mean(arr_delay))
flights %>% group_by(carrier) %>%
mutate(avg_dep_delay = mean(dep_delay),avg_arr_delay = mean(arr_delay)) %>%
summarise(avg_arr_delay,avg_dep_delay)
flights %>% group_by(carrier) %>%
mutate(avg_dep_delay = mean(dep_delay),avg_arr_delay = mean(arr_delay)) %>%
summarise()
flights %>% group_by(carrier) %>%
summarise(avg_dep_delay = mean(dep_delay),avg_arr_delay = mean(arr_delay))
# summarise()
flights %>% group_by(carrier) %>%
summarise(avg_dep_delay = mean(dep_delay[!is.na(dep_delay)]),
avg_arr_delay = mean(arr_delay[!is.na(arr_delay)]))
# summarise()
credit <-read.csv("credit.csv", header = TRUE, stringsAsFactors = TRUE)
sapply(credit, is.factor)
## Data manipulation and visualization
library(dplyr); library(ggplot2); library(gmodels)
## Modeling process packages
library(caret)     # for resampling and model training
library(rsample)   # splitting the data into training and test datasets
## Data manipulation and visualization
library(dplyr); library(ggplot2); library(gmodels)
## Modeling process packages
library(caret)     # for resampling and model training
library(rsample)   # splitting the data into training and test datasets
# Stratified sampling with the rsample package
set.seed(123)
split <- initial_split(credit, prop = 0.7,
strata = "default")
default_train  <- training(split)
default_test   <- testing(split)
?trainControl
# Create grid of hyperparameter values
hyper_grid <- expand.grid(k = seq(30, 80, by = 1))
# Tune a knn model using grid search
knn_fit <- train(
default ~ . ,
data = default_train,
method = "knn",
trControl = cv,
tuneGrid = hyper_grid,
metric = "Accuracy"
)
knn_fit$bestTune
knn_fit
ggplot(knn_fit)
defaultPred <- predict(knn_fit, default_test, type="prob")
plot(defaultPred$yes~default, data=default_test); abline(h=0.5, col="red")
plot(default~defaultPred$yes, data=default_test)
sqrt(2) ^ 2 == 2
near(sqrt(2) ^ 2, 2)
library(tidyverse)
library(nycflights13)
sqrt(2) ^ 2 == 2
near(sqrt(2) ^ 2, 2)
data("flights")
flights %>% filter((arr_delay>=3*60) & (dest %in% c('DFW','DAL'))
& (carrier %in% c('WN','AA')))
?flights
flights %>% filter(arr_delay>=3*60)
flights %>% filter(dest %in% c('DFW','DAL'))
flights %>% filter(carrier %in% c('WN','AA'))
?flights
flights %>% filter((arr_delay > 2 * 60) && (air_time > 30))
flights %>% filter((arr_delay > 2 * 60) && (air_time > 30))
flights %>% filter((arr_delay > 2 * 60) )
flights %>% filter((arr_delay > 2 * 60) && ((sched_arr_time - sched_dep_time) - air_time > 30))
flights %>% filter((arr_delay > 2 * 60) && ((sched_arr_time - sched_dep_time) - air_time > 30))
flights %>% mutate( sched_air_time =  (sched_arr_time - sched_dep_time)) %>%
summarise(sched_air_time,air_time)
flights %>% filter((arr_delay > 2 * 60) && ((sched_arr_time - sched_dep_time - air_time)  > 30))
flights %>% mutate( sched_air_time =  (sched_arr_time - sched_dep_time)) %>%
filter(arr_delay > 2 * 60)
flights %>% mutate( sched_air_time =  (sched_arr_time - sched_dep_time)) %>%
filter((arr_delay > 2 * 60) && abs(sched_air_time - air_time) > 30)
flights %>% mutate( air_time_offset =  abs(sched_arr_time - sched_dep_time - air_time)) %>%
summarise(air_time_offset)
flights %>% mutate( air_time_offset =  abs(sched_arr_time - sched_dep_time - air_time)) %>%
filter((arr_delay > 2 * 60))
flights %>% mutate( air_time_offset =  abs(sched_arr_time - sched_dep_time - air_time)) %>%
filter((arr_delay > 2 * 60) && (air_time_offset > 30))
flights %>% mutate( air_time_offset =  abs(sched_arr_time - sched_dep_time - air_time)) %>%
filter((arr_delay > 2 * 60) && (air_time_offset))
flights %>% mutate( air_time_offset =  abs(sched_arr_time - sched_dep_time - air_time)) %>%
filter((arr_delay > 2 * 60) )
flights %>% mutate( air_time_offset =  abs(sched_arr_time - sched_dep_time - air_time)) %>%
filter(arr_delay > 2 * 60, air_time_offset >30)
flights %>% filter((arr_delay > 2 * 60),((sched_arr_time - sched_dep_time - air_time)  > 30))
flights %>% filter((arr_delay > 2 * 60),((sched_arr_time - sched_dep_time) - air_time  > 30))
flights %>% filter(arr_delay > 2 * 60,(sched_arr_time - sched_dep_time) - air_time  > 30)
flights %>% filter(dep_delay > 1 * 60,arr_delay > 60 ,(sched_arr_time - sched_dep_time) - air_time  > 30)
flights %>% !is.na() %>% arrange()
flights %>% is.na() %>% arrange()
flights %>% arrange(is.na(flights))
flights %>% arrange(!is.na(flights))
flights %>% arrange(is.na(flights),dest = TRUE)
flights %>% arrange(is.na(flights),dest = FALSE)
?arrange
flights %>% arrange(is.na(flights),desc )
flights %>% arrange(is.na(flights),desc = FALSE )
flights %>% arrange(is.na(flights),desc = FALSE )
flights %>% arrange(is.na(flights),desc = FALSE )
flights %>% arrange(is.na(flights),desc = TRUE )
?select
flights %>% select(sched_arr_time,sched_dep_time,everything())
flights %>% select(sched_arr_time,sched_dep_time)
flights %>% select(sched_arr_time,sched_dep_time > 500,sched_dep_time)
flights %>% select(sched_arr_time,sched_dep_time,sched_dep_time)
??rank
?rank
flights %>% mutate(ranking = rank(score, ties.method = "min")) %>%
top_n(10)
flights %>% mutate(ranking = rank(score, ties.method = "min"))
flights %>% mutate(ranking = rank(arr_delay, ties.method = "min")) %>%
top_n(10)
flights %>% filter(!is.na(arr_delay)) %>%
mutate(ranking = rank(arr_delay, ties.method = "min")) %>%
top_n(10)
? min_rank
flights %>% filter(!is.na(arr_delay)) %>%
mutate(ranking = min_rank(arr_delay) %>%
top_n(10)
flights %>% filter(!is.na(arr_delay)) %>%
mutate(ranking = min_rank(arr_delay) %>%
top_n(10)
flights %>% filter(!is.na(arr_delay)) %>%
mutate(ranking = min_rank(arr_delay)) %>%
top_n(10)
```{r}
?flights
flights %>% group_by(day) %>%
summarise(mean(sched_dep_time))
flights %>% group_by(month,day) %>%
summarise(mean(sched_dep_time))
flights %>% group_by(hour) %>%
summarise(mean(sched_dep_time))
flights %>% group_by(hour) %>%
summarise(mean(dep_delay))
flights %>% filter(!is.na(dep_delay))
group_by(hour) %>%
summarise(mean(dep_delay))
flights %>% filter(!is.na(dep_delay))
group_by(hour) %>%
summarise(mean(dep_delay))
flights %>% filter(!is.na(dep_delay)) %>%
group_by(hour) %>%
summarise(mean(dep_delay))
flights %>% filter(!is.na(dep_delay)) %>%
group_by(hour) %>%
summarise(mean(dep_delay)) %>%
ggplot(aes(hour)) +
geom_histogram()
flights %>% filter(!is.na(dep_delay)) %>%
group_by(hour) %>%
summarise(mean(dep_delay)) %>%
ggplot(aes(dep_delay)) +
geom_histogram()
flights %>% filter(!is.na(dep_delay)) %>%
group_by(hour) %>%
summarise(mean(dep_delay)) %>%
ggplot() +
geom_histogram()
flights %>% filter(!is.na(dep_delay)) %>%
group_by(hour) %>%
summarise(mean(dep_delay)) %>%
ggplotaes(x=hour) +
geom_histogram()
?hist
flights %>% filter(!is.na(dep_delay)) %>%
group_by(hour) %>%
summarise(mean(dep_delay)) %>%
ggplot(aes(x= as.factor(hour))) + geom_bar()
flights %>% filter(!is.na(dep_delay)) %>%
group_by(hour) %>%
summarise(mean(dep_delay)) %>%
flights %>% filter(!is.na(dep_delay)) %>%
group_by(hour) %>%
summarise(mean(dep_delay))
flights %>% filter(!is.na(dep_delay)) %>%
group_by(hour) %>%
summarise(mean(dep_delay))
flights %>% filter(!is.na(dep_delay)) %>%
group_by(hour) %>%
summarise(mean(dep_delay),n())
flights %>% filter(dep_delay > 0) %>%
group_by(hour) %>%
summarise(mean(dep_delay),n())
flights %>% filter(dep_delay > 0) %>%
group_by(hour) %>%
summarise(mean(dep_delay),n())
flights %>% filter(dep_delay > 0) %>%
group_by(hour) %>%
summarise(avg_delay = mean(dep_delay),n())
flights %>% filter(dep_delay > 0) %>%
group_by(hour) %>%
summarise(avg_delay = mean(dep_delay),happend_times = n())
summarise(avg_delay = mean(dep_delay),happend_times = n())
flights %>% filter(dep_delay > 0) %>%
group_by(hour) %>%
summarise(avg_delay = mean(dep_delay),happend_times = n())
flights %>% group_by(carrier) %>%
summarise(avg_dep_delay = mean(dep_delay[!is.na(dep_delay)]),
avg_arr_delay = mean(arr_delay[!is.na(arr_delay)]))
flights %>% group_by(carrier) %>%
summarise(avg_dep_delay = mean(dep_delay[!is.na(dep_delay)]),
avg_arr_delay = mean(arr_delay[!is.na(arr_delay)]))
## Data manipulation and visualization
library(dplyr); library(ggplot2); library(gmodels)
## Modeling process packages
library(caret)     # for resampling and model training
library(rsample)   # splitting the data into training and test datasets
credit <-read.csv("credit.csv", header = TRUE, stringsAsFactors = TRUE)
sapply(credit, is.factor)
# Stratified sampling with the rsample package
set.seed(123)
split <- initial_split(credit, prop = 0.7,
strata = "default")
default_train  <- training(split)
default_test   <- testing(split)
# Create grid of hyperparameter values
hyper_grid <- expand.grid(k = seq(30, 80, by = 1))
# Tune a knn model using grid search
knn_fit <- train(
default ~ . ,
data = default_train,
method = "knn",
trControl = cv,
tuneGrid = hyper_grid,
metric = "Accuracy"
)
knn_fit$bestTune
knn_fit
ggplot(knn_fit)
knn_fit$bestTune
knn_fit
knn_fit$bestTune
ggplot(knn_fit)
knn_fit$metric
knn_fit$results
knn_fit$finalModel
knn_fit$finalModel
finalModel<- knn_fit$finalModel
View(finalModel)
finalModel$learn
finalModel$theDots
finalModel$obsLevels
finalModel$param
finalModel$tuneValue
finalModel$learn
# Create grid of hyperparameter values
hyper_grid <- expand.grid(k = seq(30, 80, by = 1))
# Tune a knn model using grid search
knn_fit <- train(
default ~ . ,
data = default_train,
method = "knn",
trControl = cv,
tuneGrid = hyper_grid,
metric = "Accuracy"
)
knn_fit$bestTune
finalModel<- knn_fit$finalModel
ggplot(knn_fit)
knn_fit$bestTune
defaultPred <- predict(knn_fit, default_test, type="prob")
plot(defaultPred$yes~default, data=default_test)
defaultPred <- predict(finalModel, default_test, type="prob")
defaultPred <- predict(knn_fit, default_test, type="prob")
plot(defaultPred$yes~default, data=default_test)
defaultPred
defaultPred <- predict(knn_fit, default_test, type="prob")
plot(defaultPred$yes~default, data=default_test)
flights %>% filter(dest %in% c('DFW','DAL'))
flights %>% filter(dest %in% c('DFW','DAL'))
library(tidyverse)
library(nycflights13)
sqrt(2) ^ 2 == 2
near(sqrt(2) ^ 2, 2)
.Machine$double.eps^0.5
data("flights")
flights %>% filter(arr_delay>=3*60)
flights %>% filter(dest %in% c('DFW','DAL'))
flights %>% filter(carrier %in% c('WN','AA'))
flights %>% filter(arr_delay > 2 * 60,(sched_arr_time - sched_dep_time) - air_time  > 30)
flights %>% filter(dep_delay > 1 * 60,arr_delay > 60 ,(sched_arr_time - sched_dep_time) - air_time  > 30)
flights %>% arrange(!is.na(flights))
?select
# everything() selects all variable. It is also useful in combination with other tidyselect operators.
flights %>% select(sched_arr_time,sched_dep_time,sched_dep_time)
??mutate
flights %>% filter(!is.na(arr_delay)) %>%
mutate(ranking = rank(arr_delay, ties.method = "min")) %>%
top_n(10)
flights %>% filter(!is.na(arr_delay)) %>%
mutate(ranking = min_rank(arr_delay)) %>%
top_n(10)
flights %>% group_by(carrier) %>%
summarise(avg_dep_delay = mean(dep_delay[!is.na(dep_delay)]),
avg_arr_delay = mean(arr_delay[!is.na(arr_delay)]))
flights %>% filter(dep_delay > 0) %>%
group_by(hour) %>%
summarise(avg_delay = mean(dep_delay),happend_times =n())
w %>% x %>% y %>% z
flights %>% filter(dest %in% c('DFW','DAL')) %>%
summarise(dest,n())
flights %>% filter(dest %in% c('DFW','DAL')) %>%
group_by(dest) %>%
summarise()
flights %>% filter(dest %in% c('DFW','DAL')) %>%
group_by(dest) %>%
summarise()
table(flights$dest)
library (dplyer)
library (ggplot2)
library (caret)
#Import Credit dataset
credit <- read.csv("credit.csv",header = TRUE, stringsAsFactors = TRUE)
sapply(credit, is.factor)
#Data splitting
set.seed(123)
index <- sample(1:nrow(credit), round(nrow(credit) * 0.75))
train <-credit[index,]
test <- credit[-index,]
#Resampling
cv <- trainControl(
method = "repeatedcv",
number = 10,
repeats = 5
)
#Create grid of hyperparameter values
hyper_grid <- expand.grid (k = seq(2, 25, by = 1))
#Knn model using grid search
knn_fit <- train(
credit ~.,
data = train,
method = "knn",
trControl = cv,
tuneGrid = hyper_grid,
metric = "Accuracy"
)
#Print and plot CV results
knn_fit
ggplot(knn_fit)
#Evaluate predictive quality of model
defaultPred <- predict(knn_fit, test, type = "prob")
plot(defaultPred$yes~default, data = test)
library (dplyer)
library (ggplot2)
library (caret)
#Import Credit dataset
credit <- read.csv("credit.csv",header = TRUE, stringsAsFactors = TRUE)
sapply(credit, is.factor)
#Data splitting
set.seed(123)
index <- sample(1:nrow(credit), round(nrow(credit) * 0.75))
train <-credit[index,]
test <- credit[-index,]
#Resampling
cv <- trainControl(
method = "repeatedcv",
number = 10,
repeats = 5
)
#Create grid of hyperparameter values
hyper_grid <- expand.grid (k = seq(2, 25, by = 1))
source('G:/UTD_Classes/Teaching-Assistant/2021-Spring/GISC-6323-Machine-Learning-for-Socio-Economic-and-Geo-Referenced-Data/Labs/Lab01/ndillard_lab01_task3.R')
library(dplyr); library(ggplot2); library(gmodels)
## Modeling process packages
library(caret)     # for resampling and model training
library(rsample)   # splitting the data into training and test datasets
#Import Credit dataset
credit <- read.csv("credit.csv",header = TRUE, stringsAsFactors = TRUE)
sapply(credit, is.factor)
#Data splitting
set.seed(123)
index <- sample(1:nrow(credit), round(nrow(credit) * 0.75))
train <-credit[index,]
test <- credit[-index,]
#Resampling
cv <- trainControl(
method = "repeatedcv",
number = 10,
repeats = 5
)
#Create grid of hyperparameter values
hyper_grid <- expand.grid (k = seq(2, 25, by = 1))
#Knn model using grid search
knn_fit <- train(
credit ~.,
data = train,
method = "knn",
trControl = cv,
tuneGrid = hyper_grid,
metric = "Accuracy"
)
library(tidyverse)
library(nycflights13)
sqrt(2) ^ 2 == 2
near(sqrt(2) ^ 2, 2)
.Machine$double.eps^0.5
data("flights")
flights %>% filter(arr_delay>=3*60)
flights %>% filter(dest %in% c('DFW','DAL'))
table(flights$dest)
flights %>% filter(carrier %in% c('WN','AA'))
flights %>% filter(arr_delay > 2 * 60,(sched_arr_time - sched_dep_time) - air_time  > 30)
flights %>% filter(dep_delay > 1 * 60,arr_delay > 60 ,(sched_arr_time - sched_dep_time) - air_time  > 30)
flights %>% arrange(!is.na(flights))
?select
# everything() selects all variable. It is also useful in combination with other tidyselect operators.
flights %>% select(sched_arr_time,sched_dep_time,sched_dep_time)
??mutate
flights %>% filter(!is.na(arr_delay)) %>%
mutate(ranking = rank(arr_delay, ties.method = "min")) %>%
top_n(10)
flights %>% filter(!is.na(arr_delay)) %>%
mutate(ranking = min_rank(arr_delay)) %>%
top_n(10)
flights %>% group_by(carrier) %>%
summarise(avg_dep_delay = mean(dep_delay[!is.na(dep_delay)]),
avg_arr_delay = mean(arr_delay[!is.na(arr_delay)]))
flights %>% filter(dep_delay > 0) %>%
group_by(hour) %>%
summarise(avg_delay = mean(dep_delay),happend_times =n())
w %>% x %>% y %>% z
## Data manipulation and visualization
library(dplyr); library(ggplot2); library(gmodels)
## Modeling process packages
library(caret)     # for resampling and model training
## Data manipulation and visualization
library(dplyr); library(ggplot2); library(gmodels)
## Modeling process packages
library(caret)     # for resampling and model training
install.packages("caret")
## Data manipulation and visualization
library(dplyr); library(ggplot2); library(gmodels)
## Modeling process packages
library(caret)     # for resampling and model training
install.packages("plyr")
## Data manipulation and visualization
library(dplyr); library(ggplot2); library(gmodels)
## Modeling process packages
library(caret)     # for resampling and model training
