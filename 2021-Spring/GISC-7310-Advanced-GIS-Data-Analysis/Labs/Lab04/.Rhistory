# Prepare Data
library(TexMix)    ## For mapping functions
library(sp)
library(maptools)
## Get polygons of neighboring States
neig.shp <- rgdal::readOGR(dsn=getwd(), layer = "TXNeighbors",
integer64 = "allow.loss", stringsAsFactors=TRUE)
setwd("G:/UTD_Classes/Teaching-Assistant/2021-Spring/GISC-7310-Advanced-GIS-Data-Analysis/Labs/Lab04")
# Prepare Data
library(TexMix)    ## For mapping functions
library(sp)
library(maptools)
## Get polygons of neighboring States
neig.shp <- rgdal::readOGR(dsn=getwd(), layer = "TXNeighbors",
integer64 = "allow.loss", stringsAsFactors=TRUE)
# Prepare Data
library(TexMix)    ## For mapping functions
library(sp)
library(maptools)
## Get polygons of neighboring States
neig.shp <- rgdal::readOGR(dsn='TXCnty2020', layer = "TXNeighbors",
integer64 = "allow.loss", stringsAsFactors=TRUE)
# Get polygons of TX counties
county.shp <- rgdal::readOGR(dsn='TXCnty2020', layer = "TXCnty",
integer64 = "allow.loss", stringsAsFactors=TRUE)
# Prepare Data
library(TexMix)    ## For mapping functions
library(sp)
library(maptools)
## Get polygons of neighboring States
neig.shp <- rgdal::readOGR(dsn='./TXCnty2020/', layer = "TXNeighbors",
integer64 = "allow.loss", stringsAsFactors=TRUE)
# Prepare Data
library(TexMix)    ## For mapping functions
library(sp)
library(maptools)
## Get polygons of neighboring States
neig.shp <- rgdal::readOGR(dsn="TXCnty2020", layer = "TXNeighbors",
integer64 = "allow.loss", stringsAsFactors=T)
# Get polygons of TX counties
county.shp <- rgdal::readOGR(dsn="TXCnty2020", layer = "TXCnty2020",
integer64 = "allow.loss", stringsAsFactors=T)
## Get interstate layer
interState.shp <- rgdal::readOGR(dsn="TXCnty2020", layer = "InterStateHwy",
integer64 = "allow.loss", stringsAsFactors=T)
# Prepare Data
library(TexMix)    ## For mapping functions
library(sp)
library(maptools)
## Get polygons of neighboring States
neig.shp <- rgdal::readOGR(dsn="TXCnty2020", layer = "TXNeighbors",
integer64 = "allow.loss", stringsAsFactors=T)
# Get polygons of TX counties
county.shp <- rgdal::readOGR(dsn="TXCnty2020", layer = "TXCnty2020",
integer64 = "allow.loss", stringsAsFactors=T)
## Get interstate layer
interState.shp <- rgdal::readOGR(dsn="TXCnty2020", layer = "InterStateHwy",
integer64 = "allow.loss", stringsAsFactors=T)
cntydf <- county.shp@data
attach(cntydf)
View(cntydf)
attach(cntydf)
n_house <- OWNOCC + RENTOCC
hist(n_house)
attach(cntydf)
n_house <- OWNOCC + RENTOCC
hist(n_house)
hist(density(n_house))
density(n_house)
hist(n_house,breaks = 20)
attach(cntydf)
n_house <- OWNOCC + RENTOCC
summary(n_house)
hist(n_house,breaks = 20)
summary(MEDVALHOME)
summary(MEDVALHOME)
hist(na.omit(MEDVALHOME))
cntydf$n_house <- cntydf$OWNOCC + cntydf$RENTOCC
hist(cntydf$n_house)
cntydf$n_house <- cntydf$OWNOCC + cntydf$RENTOCC
hist(cntydf$n_house,breaks = 20)
plot(neig.shp, axes=T, col=grey(0.9),                         # first background (axes=T adds lat/long frame)
border="white",  bg="lightblue",                         # border and background color
xlim=county.bbox[1,], ylim=county.bbox[2,])              # within bounding box
county.bbox <- bbox(county.shp)                             # county bounding box for map region
county.centroid <- coordinates(county.shp)                  # Get county centroids
plot(neig.shp, axes=T, col=grey(0.9),                         # first background (axes=T adds lat/long frame)
border="white",  bg="lightblue",                         # border and background color
xlim=county.bbox[1,], ylim=county.bbox[2,])              # within bounding box
mapColorRamp(county.shp$n_house, county.shp, breaks=8,         # second add map
map.title="Number of Houses",
legend.cex=0.8,
legend.title="UNumber of Houses",add.to.map=T)  # add.to.map=T over-plots provinces over neighbors
county.shp$n_house
cntydf$n_house <- cntydf$OWNOCC + cntydf$RENTOCC
hist(cntydf$n_house,breaks = 20)
county.bbox <- bbox(county.shp)                             # county bounding box for map region
county.centroid <- coordinates(county.shp)                  # Get county centroids
plot(neig.shp, axes=T, col=grey(0.9),                         # first background (axes=T adds lat/long frame)
border="white",  bg="lightblue",                         # border and background color
xlim=county.bbox[1,], ylim=county.bbox[2,])              # within bounding box
mapColorRamp(cntydf$n_house, county.shp, breaks=8,         # second add map
map.title="Number of Houses",
legend.cex=0.8,
legend.title="UNumber of Houses",add.to.map=T)  # add.to.map=T over-plots provinces over neighbors
plot(interState.shp, col="tomato4", lwd=1, add=T)             # insert road network for orientation
county.bbox <- bbox(county.shp)                             # county bounding box for map region
county.centroid <- coordinates(county.shp)                  # Get county centroids
plot(neig.shp, axes=T, col=grey(0.9),                         # first background (axes=T adds lat/long frame)
border="white",  bg="lightblue",                         # border and background color
xlim=county.bbox[1,], ylim=county.bbox[2,])              # within bounding box
mapColorRamp(cntydf$n_house, county.shp, breaks=8,         # second add map
map.title="Number of Houses",
legend.cex=0.8,
legend.title="UNumber of Houses",add.to.map=T)  # add.to.map=T over-plots provinces over neighbors
plot(interState.shp, col="tomato4", lwd=1, add=T)             # insert road network for orientation
# Delete the NA value
which(is.na(cntydf$MEDVALHOME))
# Delete the NA value
cntydf <-  cntydf[-which(is.na(cntydf$MEDVALHOME)),]
summary(cntydf$MEDVALHOME)
hist(na.omit(MEDVALHOME))
# Delete the NA value
cntydf <-  cntydf[-which(is.na(cntydf$MEDVALHOME)),]
summary(cntydf$MEDVALHOME)
# Prepare Data
library(TexMix)    ## For mapping functions
library(sp)
library(maptools)
## Get polygons of neighboring States
neig.shp <- rgdal::readOGR(dsn="TXCnty2020", layer = "TXNeighbors",
integer64 = "allow.loss", stringsAsFactors=T)
# Get polygons of TX counties
county.shp <- rgdal::readOGR(dsn="TXCnty2020", layer = "TXCnty2020",
integer64 = "allow.loss", stringsAsFactors=T)
## Get interstate layer
interState.shp <- rgdal::readOGR(dsn="TXCnty2020", layer = "InterStateHwy",
integer64 = "allow.loss", stringsAsFactors=T)
cntydf <- county.shp@data
cntydf$n_house <- cntydf$OWNOCC + cntydf$RENTOCC
hist(cntydf$n_house,breaks = 20)
county.bbox <- bbox(county.shp)                             # county bounding box for map region
county.centroid <- coordinates(county.shp)                  # Get county centroids
plot(neig.shp, axes=T, col=grey(0.9),                         # first background (axes=T adds lat/long frame)
border="white",  bg="lightblue",                         # border and background color
xlim=county.bbox[1,], ylim=county.bbox[2,])              # within bounding box
mapColorRamp(cntydf$n_house, county.shp, breaks=8,         # second add map
map.title="Number of Houses",
legend.cex=0.8,
legend.title="UNumber of Houses",add.to.map=T)  # add.to.map=T over-plots provinces over neighbors
plot(interState.shp, col="tomato4", lwd=1, add=T)             # insert road network for orientation
summary(cntydf$MEDVALHOME)
hist(na.omit(MEDVALHOME))
# Delete the NA value
cntydf <-  cntydf[-which(is.na(cntydf$MEDVALHOME)),]
summary(cntydf$MEDVALHOME)
plot(neig.shp, axes=T, col=grey(0.9),                         # first background (axes=T adds lat/long frame)
border="white",  bg="lightblue",                         # border and background color
xlim=county.bbox[1,], ylim=county.bbox[2,])              # within bounding box
mapColorRamp(cntydf$MEDVALHOME, county.shp, breaks=8,         # second add map
map.title="Number of Houses",
legend.cex=0.8,
legend.title="UNumber of Houses",add.to.map=T)  # add.to.map=T over-plots provinces over neighbors
plot(interState.shp, col="tomato4", lwd=1, add=T)             # insert road network for orientation
plot(neig.shp, axes=T, col=grey(0.9),                         # first background (axes=T adds lat/long frame)
border="white",  bg="lightblue",                         # border and background color
xlim=county.bbox[1,], ylim=county.bbox[2,])              # within bounding box
mapColorRamp(cntydf$MEDVALHOME, county.shp, breaks=8,         # second add map
map.title="Number of Houses",
legend.cex=0.8,
legend.title="UNumber of Houses",add.to.map=T)  # add.to.map=T over-plots provinces over neighbors
plot(interState.shp, col="tomato4", lwd=1, add=T)             # insert road network for orientation
plot(neig.shp, axes=T, col=grey(0.9),                         # first background (axes=T adds lat/long frame)
border="white",  bg="lightblue",                         # border and background color
xlim=county.bbox[1,], ylim=county.bbox[2,])              # within bounding box
mapColorRamp(cntydf$MEDVALHOME, county.shp, breaks=10,         # second add map
map.title="Number of Houses",
legend.cex=0.8,
legend.title="UNumber of Houses",add.to.map=T)  # add.to.map=T over-plots provinces over neighbors
?colorRamp
plot(neig.shp, axes=T, col=grey(0.9),                         # first background (axes=T adds lat/long frame)
border="white",  bg="lightblue",                         # border and background color
xlim=county.bbox[1,], ylim=county.bbox[2,])              # within bounding box
mapColorRamp(cntydf$MEDVALHOME, county.shp, breaks=10,         # second add map
map.title="Number of Houses",
legend.cex=0.8,
legend.title="UNumber of Houses",add.to.map=T)  # add.to.map=T over-plots provinces over neighbors
??mapColorQual
plot(neig.shp, axes=T, col=grey(0.9),                         # first background (axes=T adds lat/long frame)
border="white",  bg="lightblue",                         # border and background color
xlim=county.bbox[1,], ylim=county.bbox[2,])              # within bounding box
mapColorQual(cntydf$MEDVALHOME, county.shp,
map.title="Median Home Value",
legend.title="Regions")
plot(neig.shp, axes=T, col=grey(0.9),                         # first background (axes=T adds lat/long frame)
border="white",  bg="lightblue",                         # border and background color
xlim=county.bbox[1,], ylim=county.bbox[2,])              # within bounding box
??mapColorQual
mapColorQual(cntydf$MEDVALHOME, county.shp, breaks = "quantile",         # second add map
map.title="Number of Houses",
legend.cex=0.8,
legend.title="UNumber of Houses",add.to.map=T)  # add.to.map=T over-plots provinces over neighbors
plot(neig.shp, axes=T, col=grey(0.9),                         # first background (axes=T adds lat/long frame)
border="white",  bg="lightblue",                         # border and background color
xlim=county.bbox[1,], ylim=county.bbox[2,])              # within bounding box
??mapColorQual
mapColorQual(cntydf$MEDVALHOME, county.shp, breaks = "quantile",         # second add map
map.title="Number of Houses",
legend.cex=0.8,
legend.title="UNumber of Houses",add.to.map=T)  # add.to.map=T over-plots provinces over neighbors
plot(neig.shp, axes=T, col=grey(0.9),                         # first background (axes=T adds lat/long frame)
border="white",  bg="lightblue",                         # border and background color
xlim=county.bbox[1,], ylim=county.bbox[2,])              # within bounding box
??mapColorQual
mapColorQual(cntydf$MEDVALHOME, county.shp, breaks = 10,         # second add map
map.title="Number of Houses",
legend.cex=0.8,
legend.title="UNumber of Houses",add.to.map=T)  # add.to.map=T over-plots provinces over neighbors
plot(neig.shp, axes=T, col=grey(0.9),                         # first background (axes=T adds lat/long frame)
border="white",  bg="lightblue",                         # border and background color
xlim=county.bbox[1,], ylim=county.bbox[2,])              # within bounding box
# ??mapColorQual
# mapColorQual(cntydf$MEDVALHOME, county.shp, breaks = 10,         # second add map
#              map.title="Number of Houses",
#              legend.cex=0.8,
#              legend.title="UNumber of Houses",add.to.map=T)  # add.to.map=T over-plots provinces over neighbors
mapColorRamp(cntydf$MEDVALHOME, county.shp, breaks=10, map.title="Number of Houses",
legend.title=deparse(substitute(var.name)),
legend.pos="$ Median Home Value", legend.cex=1, add.to.map=FALSE)
plot(neig.shp, axes=T, col=grey(0.9),                         # first background (axes=T adds lat/long frame)
border="white",  bg="lightblue",                         # border and background color
xlim=county.bbox[1,], ylim=county.bbox[2,])              # within bounding box
mapColorRamp(cntydf$MEDVALHOME, county.shp, breaks=4, map.title="Number of Houses",
legend.title=deparse(substitute(var.name)),
legend.pos="$ Median Home Value", legend.cex=1, add.to.map=FALSE)
plot(neig.shp, axes=T, col=grey(0.9),                         # first background (axes=T adds lat/long frame)
border="white",  bg="lightblue",                         # border and background color
xlim=county.bbox[1,], ylim=county.bbox[2,])              # within bounding box
mapColorRamp(cntydf$MEDVALHOME, county.shp, breaks=4, map.title="Number of Houses",
legend.pos="$ Median Home Value", legend.cex=1, add.to.map=FALSE)
plot(neig.shp, axes=T, col=grey(0.9),                         # first background (axes=T adds lat/long frame)
border="white",  bg="lightblue",                         # border and background color
xlim=county.bbox[1,], ylim=county.bbox[2,])              # within bounding box
??mapColorQual
mapColorQual(cntydf$MEDVALHOME, county.shp, breaks = 4,         # second add map
map.title="Number of Houses",
legend.cex=0.8,
legend.title="UNumber of Houses",add.to.map=T)  # add.to.map=T over-plots provinces over neighbors
plot(neig.shp, axes=T, col=grey(0.9),                         # first background (axes=T adds lat/long frame)
border="white",  bg="lightblue",                         # border and background color
xlim=county.bbox[1,], ylim=county.bbox[2,])              # within bounding box
mapColorRamp(cntydf$MEDVALHOME, county.shp, breaks=4,         # second add map
map.title="Number of Houses",
legend.cex=0.8,
legend.title="UNumber of Houses",add.to.map=T)  # add.to.map=T over-plots provinces over neighbors
plot(interState.shp, col="tomato4", lwd=1, add=T)             # insert road network for orientation
plot(neig.shp, axes=T, col=grey(0.9),                         # first background (axes=T adds lat/long frame)
border="white",  bg="lightblue",                         # border and background color
xlim=county.bbox[1,], ylim=county.bbox[2,])              # within bounding box
mapColorRamp(cntydf$MEDVALHOME, county.shp, breaks=4,         # second add map
map.title="Number of Houses",
legend.cex=0.8,
legend.title="UNumber of Houses",add.to.map=T)  # add.to.map=T over-plots provinces over neighbors
plot(interState.shp, col="tomato4", lwd=1, add=T)             # insert road network for orientation
plot(neig.shp, axes=T, col=grey(0.9),                         # first background (axes=T adds lat/long frame)
border="white",  bg="lightblue",                         # border and background color
xlim=county.bbox[1,], ylim=county.bbox[2,])              # within bounding box
mapBiPolar(cntydf$MEDVALHOME, county.shp, break.value= mean(cntydf$MEDVALHOME),         # second add map
neg.breaks=5, pos.breaks=5,
map.title="Spatial distribution of Median Home Value",
legend.cex=0.8,
legend.title="$ Median Home Value",add.to.map=T)  # add.to.map=T over-plots provinces over neighbors
plot(interState.shp, col="tomato4", lwd=1, add=T)             # insert road network for orientation
cntydf <- transform(cntydf,
POPDENSE = log(POPDENSE),
BNEW = B2010PCT+B2000PCT,
BOLD = B1960PCT+B1950PCT+B1940PCT+BPREPCT
)
cntydf <- transform(cntydf,
POPDENSE = log(POPDENSE),
BNEW = B2010PCT+B2000PCT,
BOLD = B1960PCT+B1950PCT+B1940PCT+BPREPCT
)
cntydf <- transform(cntydf,
POPDENSE = log(POPDENSE),
BNEW = B2010PCT+B2000PCT,
BOLD = B1960PCT+B1950PCT+B1940PCT+BPREPCT
)
cntydf <- transform(cntydf,
POPDENSE = log(POPDENSE)+1,
BNEW = B2010PCT+B2000PCT,
BOLD = B1960PCT+B1950PCT+B1940PCT+BPREPCT
)
# Prepare Data
library(TexMix)    ## For mapping functions
library(sp)
library(maptools)
## Get polygons of neighboring States
neig.shp <- rgdal::readOGR(dsn="TXCnty2020", layer = "TXNeighbors",
integer64 = "allow.loss", stringsAsFactors=T)
# Get polygons of TX counties
county.shp <- rgdal::readOGR(dsn="TXCnty2020", layer = "TXCnty2020",
integer64 = "allow.loss", stringsAsFactors=T)
## Get interstate layer
interState.shp <- rgdal::readOGR(dsn="TXCnty2020", layer = "InterStateHwy",
integer64 = "allow.loss", stringsAsFactors=T)
cntydf <- county.shp@data
# Delete the NA value
cntydf <-  cntydf[-which(is.na(cntydf$MEDVALHOME)),]
summary(cntydf$MEDVALHOME)
cntydf <- transform(cntydf,
POPDENSE = log(POPDENSE),
BNEW = B2010PCT+B2000PCT,
BOLD = B1960PCT+B1950PCT+B1940PCT+BPREPCT
)
hist(na.omit(MEDVALHOME))
hist(cntdf$MEDVALHOME)
hist(cntydf$MEDVALHOME)
par(mfrow = c(1,2))
hist(cntydf$MEDVALHOME,main = paste('Skewness =',round(e1071::skewness(cntydf$MEDVALHOME),2)),xlab= 'x')
cntydf$MEDVALHOME.log <- log(cntydf$MEDVALHOME)
hist(cntydf$MEDVALHOME.log,main = paste('After log, Skewness =',round(e1071::skewness(cntydf$MEDVALHOME.log),2)),xlab= 'x')
par(mfrow = c(1,2))
hist(cntydf$MEDVALHOME,main = paste('Skewness =',round(e1071::skewness(cntydf$MEDVALHOME),2)),xlab= 'x')
cntydf$MEDVALHOME.log <- log(cntydf$MEDVALHOME)
hist(cntydf$MEDVALHOME.log,main = paste('After log, Skewness =',round(e1071::skewness(cntydf$MEDVALHOME.log),2)),xlab= 'x')
boxplot(cntydf$MEDVALHOME.log~cntydf$URBRURAL)
boxplot(cntydf$MEDVALHOME.log~cntydf$URBRURAL, xlab = 'Urban / Rural', ylab = 'log(Median Home Value)')
boxplot(cntydf$MEDVALHOME.log~cntydf$URBRURAL, xlab = 'Urban / Rural', ylab = 'log(Median Home Value)')
scatterplotMatrix(~ BNEW + CRIMERATE + POPDENSE + MEDAGE, data = cntydf,smooth=list(span = 0.35, lty.smooth=1, col.smooth="red", col.var="salmon"), regLine=list(col="green"))
car::scatterplotMatrix(~ BNEW + CRIMERATE + POPDENSE + MEDAGE, data = cntydf,smooth=list(span = 0.35, lty.smooth=1, col.smooth="red", col.var="salmon"), regLine=list(col="green"))
car::scatterplotMatrix(~ BNEW + CRIMERATE + POPDENSE + MEDAGE, data = cntydf,smooth=list(span = 0.35, lty.smooth=1, col.smooth="red", col.var="salmon"), regLine=list(col="green"))
cntydf <- transform(cntydf,
BNEW = B2010PCT+B2000PCT,
)
# Prepare Data
library(TexMix)    ## For mapping functions
library(sp)
library(maptools)
## Get polygons of neighboring States
neig.shp <- rgdal::readOGR(dsn="TXCnty2020", layer = "TXNeighbors",
integer64 = "allow.loss", stringsAsFactors=T)
# Get polygons of TX counties
county.shp <- rgdal::readOGR(dsn="TXCnty2020", layer = "TXCnty2020",
integer64 = "allow.loss", stringsAsFactors=T)
## Get interstate layer
interState.shp <- rgdal::readOGR(dsn="TXCnty2020", layer = "InterStateHwy",
integer64 = "allow.loss", stringsAsFactors=T)
cntydf <- county.shp@data
cntydf$n_house <- cntydf$OWNOCC + cntydf$RENTOCC
hist(cntydf$n_house,breaks = 20)
county.bbox <- bbox(county.shp)                             # county bounding box for map region
county.centroid <- coordinates(county.shp)                  # Get county centroids
plot(neig.shp, axes=T, col=grey(0.9),                         # first background (axes=T adds lat/long frame)
border="white",  bg="lightblue",                         # border and background color
xlim=county.bbox[1,], ylim=county.bbox[2,])              # within bounding box
mapColorRamp(cntydf$n_house, county.shp, breaks=8,         # second add map
map.title="Number of Houses",
legend.cex=0.8,
legend.title="UNumber of Houses",add.to.map=T)  # add.to.map=T over-plots provinces over neighbors
plot(interState.shp, col="tomato4", lwd=1, add=T)             # insert road network for orientation
summary(cntydf$MEDVALHOME)
hist(na.omit(MEDVALHOME))
# Delete the NA value
cntydf <-  cntydf[-which(is.na(cntydf$MEDVALHOME)),]
summary(cntydf$MEDVALHOME)
plot(neig.shp, axes=T, col=grey(0.9),                         # first background (axes=T adds lat/long frame)
border="white",  bg="lightblue",                         # border and background color
xlim=county.bbox[1,], ylim=county.bbox[2,])              # within bounding box
mapBiPolar(cntydf$MEDVALHOME, county.shp, break.value= mean(cntydf$MEDVALHOME),         # second add map
neg.breaks=5, pos.breaks=5,
map.title="Spatial distribution of Median Home Value",
legend.cex=0.8,
legend.title="$ Median Home Value",add.to.map=T)  # add.to.map=T over-plots provinces over neighbors
plot(interState.shp, col="tomato4", lwd=1, add=T)             # insert road network for orientation
cntydf <- transform(cntydf,
BNEW = B2010PCT+B2000PCT,
)
cntydf <- transform(cntydf,
BNEW = B2010PCT+B2000PCT
)
par(mfrow = c(1,2))
hist(cntydf$MEDVALHOME,main = paste('Skewness =',round(e1071::skewness(cntydf$MEDVALHOME),2)),xlab= 'x')
cntydf$MEDVALHOME.log <- log(cntydf$MEDVALHOME)
hist(cntydf$MEDVALHOME.log,main = paste('After log, Skewness =',round(e1071::skewness(cntydf$MEDVALHOME.log),2)),xlab= 'x')
boxplot(cntydf$MEDVALHOME.log~cntydf$URBRURAL, xlab = 'Urban / Rural', ylab = 'log(Median Home Value)')
car::scatterplotMatrix(~ BNEW + CRIMERATE + POPDENSE + MEDAGE, data = cntydf,smooth=list(span = 0.35, lty.smooth=1, col.smooth="red", col.var="salmon"), regLine=list(col="green"))
cntydf$POPDENSE.log <- log(cntydf$POPDENSE)
par(mfrow = c(1,2))
hist(cntydf$POPDENSE.log,breaks = 12,main = paste('Tranformed POPDENSE, Skewness =',round(e1071::skewness(cntydf$POPDENSE.log),2)),xlab = 'x')
hist(cntydf$POPDENSE,breaks = 12,main = paste('Origin POPDENSE, Skewness =',round(e1071::skewness(cntydf$POPDENSE),2)),xlab = 'x')
cntydf$POPDENSE.log <- log(cntydf$POPDENSE)
par(mfrow = c(1,2))
hist(cntydf$POPDENSE.log,breaks = 12,main = paste('Tranformed POPDENSE, Skewness =',round(e1071::skewness(cntydf$POPDENSE.log),2)),xlab = 'x')
hist(cntydf$POPDENSE,breaks = 12,main = paste('Origin POPDENSE, Skewness =',round(e1071::skewness(cntydf$POPDENSE),2)),xlab = 'x')
library(MASS)
full.model <- lm(cntydf$MEDVALHOME.log~ CRIMERATE + POPDENSE.log + URBRURAL + BNEW + MEDAGE, data = cntydf)
step.model <- stepAIC(full.model, direction = "both", trace = FALSE)
summary(full.model)
boxplot(cntydf$MEDVALHOME.log~cntydf$REGION, xlab = 'Region', ylab = 'log(Median Home Value)')
library(MASS)
full.model <- lm(cntydf$MEDVALHOME.log~ CRIMERATE + POPDENSE.log + REGION + BNEW + MEDAGE, data = cntydf)
step.model <- stepAIC(full.model, direction = "both", trace = FALSE)
summary(full.model)
summary(step.model)
vif(step.model)
library(maptools);library(car)
vif(step.model)
qqPlot(step.model)
qqPlot(step.model)
shapiro.test(residuals(step.model))
residualPlots(step.model)
residualPlots(step.model)
updated.model <- update(step.model, .~.+I(BNEW^2))
summary(updated.model)
anova(step.model,updated.model)
# anova(step.model,updated.model)
summary(updated.model)
car::influenceIndexPlot(updated.model)
car::influenceIndexPlot(updated.model)
cntydf[c(18,27,80,251),c(POPDENSE.log ,REGION ,BNEW ,MEDAGE)]
cntydf[c(18,27,80,251),c('POPDENSE.log' ,'REGION' ,'BNEW' ,'MEDAGE')]
cntydf[c(18,27,80,251),c('MEDVALHOME','POPDENSE.log' ,'REGION' ,'BNEW' ,'MEDAGE')]
summary(cntydf$MEDVALHOME)
summary(list(cntydf$MEDVALHOME,cntydf$POPDENSE.log))
summary(c(cntydf$MEDVALHOME,cntydf$POPDENSE.log))
apply(cntydf[,c('MEDVALHOME','POPDENSE.log' ,'REGION' ,'BNEW' ,'MEDAGE')],2,summary)
apply(cntydf[,c('MEDVALHOME','POPDENSE.log' ,'REGION' ,'BNEW' ,'MEDAGE')],1,summary)
apply(cntydf[,c('MEDVALHOME','POPDENSE.log' ,'REGION' ,'BNEW' ,'MEDAGE')],2,summary)
summary(cntydf$MEDVALHOME)
summary(cntydf$MEDVALHOME)
summary(cntydf$POPDENSE.log)
summary(cntydf$BNEW)
summary(cntydf$MEDAGE)
apply(cntydf[,c('MEDVALHOME','POPDENSE.log','BNEW' ,'MEDAGE')], 2, summary)
apply(cntydf[,c('MEDVALHOME','POPDENSE.log','BNEW' ,'MEDAGE')], 2, summary)
summary(updated.model)
auxreg<- lm(log(residuals(updated.model)^2)~cntydf$MEDVALHOME.log)
plot(log(residuals(updated.model)^2)~log(cntydf$MEDVALHOME.log)); abline(auxreg, col="red")
auxreg<- lm(log(residuals(updated.model)^2)~cntydf$MEDVALHOME.log)
plot(log(residuals(updated.model)^2)~cntydf$MEDVALHOME.log); abline(auxreg, col="red")
lm.hetero <- lmHetero(MEDVALHOME.log ~ REGION + POPDENSE.log + BNEW  + MEDAGE, hetero=~log(Voters), data=cntydf )
lm.hetero <- lmHetero(MEDVALHOME.log ~ REGION + POPDENSE.log + BNEW  + MEDAGE, hetero=~log(n_house), data=cntydf )
summary(lm.hetero)
lm.weight <- lm(MEDVALHOME.log ~ REGION + POPDENSE.log + BNEW  + MEDAGE, hetero=~log(n_house), data=cntydf ,weights=log(cntydf$n_house))
summary(lm.weight)
Resid.weight <- weighted.residuals(lm.weight)
(length(Resid.weight[Resid.weight < 0]) )
(length(Resid.weight[Resid.weight > 0]) )
plot(ng.shp,axes=T,col=grey(0.9),border="white",bg = 'light blue',xlim=ct.bbox[1,],ylim=ct.bbox[2,])               # first background
plot(neig.shp,axes=T,col=grey(0.9),border="white",bg = 'light blue',xlim=ct.bbox[1,],ylim=ct.bbox[2,])               # first background
plot(neig.shp,axes=T,col=grey(0.9),border="white",bg = 'light blue',xlim=county.bbox[1,],ylim=county.bbox[2,])               # first background
mapBiPolar(Resid.weight, county.shp, neg.breaks=6, pos.breaks=6, break.value=0.0, map.title="Refined Residuals",legend.title="Residuals", legend.cex=1.5, add.to.map=T)
plot(hw.shp, col="tomato4", lwd=1, add=T)             # insert road network for orientation
plot(neig.shp,axes=T,col=grey(0.9),border="white",bg = 'light blue',xlim=county.bbox[1,],ylim=county.bbox[2,])               # first background
mapBiPolar(Resid.weight, county.shp, neg.breaks=6, pos.breaks=6, break.value=0.0, map.title="Refined Residuals",legend.title="Residuals", legend.cex=1.5, add.to.map=T)
plot(interState.shp, col="tomato4", lwd=1, add=T)             # insert road network for orientation
ct.link <- poly2nb(county.shp, queen=F)
library(maptools);library(spdep)
ct.link <- poly2nb(county.shp, queen=F)
ct.centroid <- coordinates(county.shp)
plot(ng.shp,axes=T,col=grey(0.9),border="white",bg = 'light blue',xlim=ct.bbox[1,],ylim=ct.bbox[2,])
library(maptools);library(spdep)
ct.link <- poly2nb(county.shp, queen=F)
ct.centroid <- coordinates(county.shp)
plot(neig.shp,axes=T,col=grey(0.9),border="white",bg = 'light blue',xlim=ct.bbox[1,],ylim=ct.bbox[2,])
library(maptools);library(spdep)
ct.link <- poly2nb(county.shp, queen=F)
ct.centroid <- coordinates(county.shp)
plot(neig.shp,axes=T,col=grey(0.9),border="white",bg = 'light blue',xlim=county.bbox[1,],ylim=county.bbox[2,])
plot(county.shp,col="palegreen3" ,border=grey(0.9), axes=T, add=T)
plot(ct.link,coords=ct.centroid, pch=19, cex=0.1,col="blue", add=T)
title("Spatial Links among Counties")
box()
library(maptools);library(spdep)
ct.link <- poly2nb(county.shp, queen=F)
ct.centroid <- coordinates(county.shp)
plot(neig.shp,axes=T,col=grey(0.9),border="white",bg = 'light blue',xlim=county.bbox[1,],ylim=county.bbox[2,])
plot(county.shp,col="palegreen3" ,border=grey(0.9), axes=T, add=T)
plot(ct.link,coords=ct.centroid, pch=19, cex=0.1,col="blue", add=T)
title("Spatial Links among Counties")
box()
ct.linkW <- nb2listw(ct.link, style="W")
spOutliers <- moran.plot(weighted.residuals(lm.weight),ct.linkW, labels=ct.data.remain$NAME)
ct.linkW <- nb2listw(ct.link, style="W")
spOutliers <- moran.plot(weighted.residuals(lm.weight),ct.linkW, labels=cntydf$NAME)
library(maptools);library(spdep)
county.shp <-  county.shp[-which(is.na(county.shp@data$MEDVALHOME)),]
ct.link <- poly2nb(county.shp, queen=F)
ct.centroid <- coordinates(county.shp)
plot(neig.shp,axes=T,col=grey(0.9),border="white",bg = 'light blue',xlim=county.bbox[1,],ylim=county.bbox[2,])
plot(county.shp,col="palegreen3" ,border=grey(0.9), axes=T, add=T)
plot(ct.link,coords=ct.centroid, pch=19, cex=0.1,col="blue", add=T)
title("Spatial Links among Counties")
box()
ct.linkW <- nb2listw(ct.link, style="W")
spOutliers <- moran.plot(weighted.residuals(lm.weight),ct.linkW, labels=cntydf$NAME)
ct.linkW <- nb2listw(ct.link, style="W")
spOutliers <- moran.plot(weighted.residuals(lm.weight),ct.linkW, labels=cntydf$NAME)
ct.linkW <- nb2listw(ct.link, style="W")
spOutliers <- moran.plot(weighted.residuals(lm.weight),ct.linkW, labels=cntydf$NAME)
lm.morantest(lm.weight, ct.linkW)
rate.SAR <- spautolm(lm.weight,na.action="na.omit", listw=ct.linkW, family="SAR")
summary(rate.SAR)
summary(rate.SAR)
rate.SAR <- spautolm(lm.weight,na.action="na.omit", listw=ct.linkW, family="SAR")
summary(rate.SAR)
likeH0 <- lm.hetero$logLikeH1    # unrestrcted model
likeH1 <- logLik(rate.SAR)
cat("chi-square value:  ", chi <- -2*(likeH0[1]-likeH1[1]))
cat("\nerror-probability: ", pchisq(chi, df=1, lower.tail=F))
moran.mc(residuals(rate.SAR), ct.linkW, nsim=9999)
