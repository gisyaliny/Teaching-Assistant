library(spatstat)
rm(list=ls(all=TRUE))
HomoCSR <- foreign::read.dbf("G:\\UTD_Classes\\
2020Spring\\GISC7360_Pattern_Analysis\\Lab03\\CSRClust.dbf")
HomoCSR <- foreign::read.dbf("G:\\UTD_Classes\\
2020Spring\\GISC7360_Pattern_Analysis\\Lab03\\CSRClust.dbf")
HomoCSR <- foreign::read.dbf("G:\\UTD_Classes\\2020Spring\\GISC7360_Pattern_Analysis\\Lab03\\CSRClust.dbf")
pat <- ppp(HomoCSR$x, HomoCSR$y, xrange=c(0,16), yrange=c(0,16))
spatialScale <- function(cell){
plot(pat, cols="red", main=paste("Pattern with",cell,'x',cell,'Cell Counts'))
qc16 <- quadratcount(pat, nx=cell, ny=cell)
plot(qc16, add=T)
vqc16 <- as.vector(qc16)
cat(paste("VMR",cell,":"),var(vqc16)/mean(vqc16))
quadrat.test(qc16)
}
spatialScale(2)
spatialScale(16)
spatialScale(8)
spatialScale(4)
spatialScale(8)
spatialScale(4)
spatialScale(2)
library(spatstat)        # Key library for spatial point pattern analysis
library(smacpod)         # Relative risk kernel densities based on statstat
library(maptools)        # To open shapefiles
rm(list=ls(all=TRUE))    # Clean objects from workspace
setwd("G:\\UTD_Classes\\2020Spring\\GISC7360_Pattern_Analysis\\Lab03\\SystematicPatterns")
## Importing shape-files
getinfo.shape("StudyArea.shp")
bnd.shp <- readShapePoly("StudyArea.shp")
getinfo.shape("RegClust.shp")
pts.shp <- readShapePoints("ClustReg.shp")
## Converting shape-files to ppp objects
pts <- as.ppp(pts.shp)
pts$marks <- NULL
pts <- pts[as.owin(bnd.shp)]
summary(pts)
plot(pts, main="RegClust")
axis(1);axis(2)
## standard L-function
plot(Lest(pts))
plot(envelope(pts, fun=Lest), main="L-function")
plot(pts, main="RegClust")
axis(1);axis(2)
## standard L-function
plot(Lest(pts))
library(spatstat)        # Key library for spatial point pattern analysis
library(smacpod)         # Relative risk kernel densities based on statstat
library(maptools)        # To open shapefiles
rm(list=ls(all=TRUE))    # Clean objects from workspace
setwd("G:\\UTD_Classes\\2020Spring\\GISC7360_Pattern_Analysis\\Lab03\\SystematicPatterns")
## Importing shape-files
getinfo.shape("StudyArea.shp")
bnd.shp <- readShapePoly("StudyArea.shp")
getinfo.shape("RegClust.shp")
pts.shp <- readShapePoints("RegClust.shp")
## Converting shape-files to ppp objects
pts <- as.ppp(pts.shp)
pts$marks <- NULL
pts <- pts[as.owin(bnd.shp)]
summary(pts)
plot(pts, main="RegClust")
axis(1);axis(2)
##
## Rejection sampling for an inhomogenous CSR process
## see: Waller p 152
##
## Intensity function
lambda <- function(x,y) return((x+y)/2)    # scale to probability
## define matrix of sample points
ppts <- matrix(NA, nrow=100, ncol=2)
icount <- 1  # counter of accepted sample points
while (icount <= 100){
ppt <- runif(2,min=0, max=1)                # generate proposal point
if (runif(1,min=0, max=1) <= lambda(ppt[1],ppt[2])){   # if TRUE => accept point
ppts[icount,] <- ppt
icount <- icount+1
} # end::if
} #end::while
plot(ppts, xlab="x-coordinate", ylab="y-coordinate",
asp=1, main="Inhomogenous CRS pattern")
## fancy plot
library(spatstat)
inHomoSurf <- as.im(lambda, W=square(1))
pp <- ppp(ppts[,1],ppts[,2], owin=square(1))
plot(inHomoSurf, col=rev(heat.colors(20)), main="Inhomogenous Surface")
plot(pp, add=T)
axis(1); axis(2)
sqrt(0.308072874,)/0.004244308
sqrt(0.308072874,)/0.004244308
sqrt
sqrt(4)
sqrt(0.308072874)
0.5550431/0.004244308
sqrt(0.004244308)
0.308072874/0.06514835
install.packages("spdep")
knitr::opts_chunk$set(echo = TRUE, prompt = TRUE, comment = "R>",
cache = FALSE)
rm(list=ls(all=TRUE))
library(car); library(maptools); library(spdep); library(TexMix)
setwd("G:\\UTD_Classes\\2020Spring\\GISC7310_AdvancedDataAnalysis\\LC6MLandGLS\\Italy")
##
## Read Poly Shapefiles (readShapePoly in library maptools)
##
getinfo.shape("Provinces.shp")
neig.shp <- rgdal::readOGR(dsn=getwd(), layer="Neighbors", integer64="warn.loss")
prov.shp <- rgdal::readOGR(dsn=getwd(), layer="Provinces", integer64="warn.loss")
summary(prov.shp)
proj4string(prov.shp)                                    # map projection
prov.centroid <- coordinates(prov.shp)                   # Get province centroids
prov.bbox <- bbox(prov.shp)                              # province bounding box for map region
is.factor(prov.shp$REGION)
table(prov.shp$REGION)
plot(neig.shp,axes=T,col=grey(0.9), border="white",      # background: neighboring countries
xlim=prov.bbox[1,], ylim=prov.bbox[2,])
mapColorQual(prov.shp$REGION, prov.shp, map.title="Italy's Regions",
legend.title="Region", add.to.map=T)
plot(neig.shp,axes=T,col=grey(0.9),border="white",       # first background (axes=T adds lat/long frame)
xlim=prov.bbox[1,],ylim=prov.bbox[2,])              # within bounding box
mapColorRamp(prov.shp$TOTFERTRAT, prov.shp, breaks=8,    # second add map
map.title="Spatial Pattern of Fertility Rate",
legend.title="Fertility Rate",
legend.cex=0.7, add.to.map=T)
## Regression model for fertility including model diagnostics
scatterplotMatrix(~TOTFERTRAT+ILLITERRAT+FEMMARAGE+DIVORCERAT+TELEPERFAM, data=prov.shp,
smooth=list(span = 0.35, lty.smooth=1, col.smooth="red", col.var="salmon"),
regLine=list(col="green"))
fert.lm <- lm(TOTFERTRAT~ILLITERRAT+FEMMARAGE+DIVORCERAT+TELEPERFAM, data=prov.shp)
summary(fert.lm,corr=F)
vif(fert.lm)
# Perform Residual Diagnostics
influenceIndexPlot(fert.lm, id=list(n=3,labels=prov.shp$PROVNAME))
fertResid <- residuals(fert.lm)
## Why is Bolzano-Bozen an extreme observation? Shall we delete it?
idx.max <- which.max(abs(fertResid))        # Get index of a record with "outlying" observation
## Map potential outlier
extremeObs <- rep(0, length(fertResid))
extremeObs[idx.max] <- 1
extremeObs <- factor(extremeObs, labels=c("Population","Outlier"))
table(extremeObs)
plot(neig.shp,axes=T,col=grey(0.9),border="white",                 # background: neighboring countries
xlim=prov.bbox[1,],ylim=prov.bbox[2,])
mapColorQual(extremeObs, prov.shp, map.title="Potential Outlier",
legend.title="Outliers", add.to.map=T)
## Inspect outlier
prov.shp@data[idx.max,]                      # List info of record centre is outlier
## Delete outlier or update information
#prov.shp <- prov.shp[-idx.max ]             # Delete extreme observation from shapefile
prov.shp@data[idx.max, "TOTFERTRAT"] <- 1.2  # Or change its value within the shapefile
## Continue with updated dataset
fert.lm <- lm(TOTFERTRAT~ILLITERRAT+FEMMARAGE+DIVORCERAT+TELEPERFAM,data=prov.shp) # update model
summary(fert.lm)
influenceIndexPlot(fert.lm, id=list(n=3, labels=prov.shp$PROVNAME))
## Check for heteroscedasticity
fert.fgls <- lmHetero(TOTFERTRAT~ILLITERRAT+FEMMARAGE+DIVORCERAT+TELEPERFAM | log(FEMPOP94),
data=prov.shp)
summary(fert.fgls)
fert.wlm <- lm(TOTFERTRAT~ILLITERRAT+FEMMARAGE+DIVORCERAT+TELEPERFAM, data=prov.shp,
weights=fert.fgls$weights)
## Plot Regression Residuals (Bi-polar)
fertResid <- weighted.residuals(fert.wlm)                # Update residuals
hist(fertResid, main="Residuals of Weighted Model")      # Explore distribution to
length(fertResid[fertResid < 0])                         # identify number of pos/neg classes
length(fertResid[fertResid >= 0])
plot(neig.shp,axes=T,col=grey(0.9),border="white",
xlim=prov.bbox[1,],ylim=prov.bbox[2,])               # first background
mapBiPolar(fertResid, prov.shp,                           # second regression residuals
neg.breaks=5, pos.breaks=4, break.value=0.0,
map.title="Fertility Model Residuals",
legend.title="Residuals",
legend.cex=0.7, add.to.map=T)
## Plot Augmented Spatial Links among Italian Provinces
## Notes: Shape file has been edited so satellite islands are connected to mainland
## Alternatively spdep::edit.nb function (does not work with RStudio)
prov.link <- poly2nb(prov.shp, queen=F)                          # Generate neighbors links
plot(neig.shp,axes=T,col=grey(0.9),border="white",
xlim=prov.bbox[1,],ylim=prov.bbox[2,])                      # First background
plot(prov.shp,col="palegreen3" ,border=grey(0.9), axes=T, add=T) # Second plot areas
plot(prov.link,coords=prov.centroid, pch=19, cex=0.1,            # Third plot links focused at centroids
col="blue", add=T)
title("Augmented Spatial Links among Provinces")                 # Forth add title
box()                                                            # Fifth refresh frame
prov.linkW <- nb2listw(prov.link, style="W")                   # generated row-sum standardized neighbors list
spOutliers <- moran.plot(weighted.residuals(fert.wlm),         # Moran plot with outlier diagnositics
prov.linkW, labels=prov.shp$PROVNAME)
lm.morantest(fert.wlm, prov.linkW)                             # Test with W-coding scheme
fert.SAR <- spautolm(TOTFERTRAT~ILLITERRAT+FEMMARAGE+DIVORCERAT+TELEPERFAM,
data=prov.shp, weights = fert.fgls$weights,
na.action="na.omit", listw=prov.linkW, family="SAR")
summary(fert.SAR)
## Likelihood Ratio test (identical to LR from spautolm)
#(likeH0 <- logLik(fert.lm))                     # Use for unweighted model
likeH0 <- fert.fgls$logLikeH1
(likeH1 <- logLik(fert.SAR))
cat("chi-square value:  ", chi <- -2*(likeH0[1]-likeH1[1]))
cat("error-probability: ", pchisq(chi, df=1, lower.tail=F))
## Moran test applying randomization because ML may not be normal distributed
plot(neig.shp,axes=T,col=grey(0.9),border="white",
xlim=prov.bbox[1,],ylim=prov.bbox[2,])                        # first background
mapBiPolar(residuals(fert.SAR), prov.shp,                          # second regression residuals
neg.breaks=5, pos.breaks=4, break.value=0.0,
map.title="Fertility SAR Model Residuals",
legend.title="Residuals", legend.cex = 0.6,
add.to.map=T)
## Evaluate ML residuals for spatial autocorrelation
moran.mc(residuals(fert.SAR), prov.linkW, nsim=9999)
knitr::opts_chunk$set(echo = TRUE, prompt = TRUE, comment = "R>",
cache = FALSE)
rm(list=ls(all=TRUE))
library(car); library(maptools); library(spdep); library(TexMix)
setwd("G:\\UTD_Classes\\2020Spring\\GISC7310_AdvancedDataAnalysis\\LC6MLandGLS\\Italy")
##
## Read Poly Shapefiles (readShapePoly in library maptools)
##
getinfo.shape("Provinces.shp")
neig.shp <- rgdal::readOGR(dsn=getwd(), layer="Neighbors", integer64="warn.loss")
prov.shp <- rgdal::readOGR(dsn=getwd(), layer="Provinces", integer64="warn.loss")
summary(prov.shp)
proj4string(prov.shp)                                    # map projection
prov.centroid <- coordinates(prov.shp)                   # Get province centroids
prov.bbox <- bbox(prov.shp)                              # province bounding box for map region
is.factor(prov.shp$REGION)
table(prov.shp$REGION)
plot(neig.shp,axes=T,col=grey(0.9), border="white",      # background: neighboring countries
xlim=prov.bbox[1,], ylim=prov.bbox[2,])
mapColorQual(prov.shp$REGION, prov.shp, map.title="Italy's Regions",
legend.title="Region", add.to.map=T)
plot(neig.shp,axes=T,col=grey(0.9),border="white",       # first background (axes=T adds lat/long frame)
xlim=prov.bbox[1,],ylim=prov.bbox[2,])              # within bounding box
mapColorRamp(prov.shp$TOTFERTRAT, prov.shp, breaks=8,    # second add map
map.title="Spatial Pattern of Fertility Rate",
legend.title="Fertility Rate",
legend.cex=0.7, add.to.map=T)
## Regression model for fertility including model diagnostics
scatterplotMatrix(~TOTFERTRAT+ILLITERRAT+FEMMARAGE+DIVORCERAT+TELEPERFAM, data=prov.shp,
smooth=list(span = 0.35, lty.smooth=1, col.smooth="red", col.var="salmon"),
regLine=list(col="green"))
fert.lm <- lm(TOTFERTRAT~ILLITERRAT+FEMMARAGE+DIVORCERAT+TELEPERFAM, data=prov.shp)
summary(fert.lm,corr=F)
vif(fert.lm)
# Perform Residual Diagnostics
influenceIndexPlot(fert.lm, id=list(n=3,labels=prov.shp$PROVNAME))
fertResid <- residuals(fert.lm)
## Why is Bolzano-Bozen an extreme observation? Shall we delete it?
idx.max <- which.max(abs(fertResid))        # Get index of a record with "outlying" observation
## Map potential outlier
extremeObs <- rep(0, length(fertResid))
extremeObs[idx.max] <- 1
extremeObs <- factor(extremeObs, labels=c("Population","Outlier"))
table(extremeObs)
plot(neig.shp,axes=T,col=grey(0.9),border="white",                 # background: neighboring countries
xlim=prov.bbox[1,],ylim=prov.bbox[2,])
mapColorQual(extremeObs, prov.shp, map.title="Potential Outlier",
legend.title="Outliers", add.to.map=T)
## Inspect outlier
prov.shp@data[idx.max,]                      # List info of record centre is outlier
## Delete outlier or update information
#prov.shp <- prov.shp[-idx.max ]             # Delete extreme observation from shapefile
prov.shp@data[idx.max, "TOTFERTRAT"] <- 1.2  # Or change its value within the shapefile
## Continue with updated dataset
fert.lm <- lm(TOTFERTRAT~ILLITERRAT+FEMMARAGE+DIVORCERAT+TELEPERFAM,data=prov.shp) # update model
summary(fert.lm)
influenceIndexPlot(fert.lm, id=list(n=3, labels=prov.shp$PROVNAME))
## Check for heteroscedasticity
fert.fgls <- lmHetero(TOTFERTRAT~ILLITERRAT+FEMMARAGE+DIVORCERAT+TELEPERFAM | log(FEMPOP94),
data=prov.shp)
summary(fert.fgls)
fert.wlm <- lm(TOTFERTRAT~ILLITERRAT+FEMMARAGE+DIVORCERAT+TELEPERFAM, data=prov.shp,
weights=fert.fgls$weights)
## Plot Regression Residuals (Bi-polar)
fertResid <- weighted.residuals(fert.wlm)                # Update residuals
hist(fertResid, main="Residuals of Weighted Model")      # Explore distribution to
length(fertResid[fertResid < 0])                         # identify number of pos/neg classes
length(fertResid[fertResid >= 0])
plot(neig.shp,axes=T,col=grey(0.9),border="white",
xlim=prov.bbox[1,],ylim=prov.bbox[2,])               # first background
mapBiPolar(fertResid, prov.shp,                           # second regression residuals
neg.breaks=5, pos.breaks=4, break.value=0.0,
map.title="Fertility Model Residuals",
legend.title="Residuals",
legend.cex=0.7, add.to.map=T)
## Plot Augmented Spatial Links among Italian Provinces
## Notes: Shape file has been edited so satellite islands are connected to mainland
## Alternatively spdep::edit.nb function (does not work with RStudio)
prov.link <- poly2nb(prov.shp, queen=F)                          # Generate neighbors links
plot(neig.shp,axes=T,col=grey(0.9),border="white",
xlim=prov.bbox[1,],ylim=prov.bbox[2,])                      # First background
plot(prov.shp,col="palegreen3" ,border=grey(0.9), axes=T, add=T) # Second plot areas
plot(prov.link,coords=prov.centroid, pch=19, cex=0.1,            # Third plot links focused at centroids
col="blue", add=T)
title("Augmented Spatial Links among Provinces")                 # Forth add title
box()                                                            # Fifth refresh frame
prov.linkW <- nb2listw(prov.link, style="W")                   # generated row-sum standardized neighbors list
spOutliers <- moran.plot(weighted.residuals(fert.wlm),         # Moran plot with outlier diagnositics
prov.linkW, labels=prov.shp$PROVNAME)
lm.morantest(fert.wlm, prov.linkW)                             # Test with W-coding scheme
fert.SAR <- spautolm(TOTFERTRAT~ILLITERRAT+FEMMARAGE+DIVORCERAT+TELEPERFAM,
data=prov.shp, weights = fert.fgls$weights,
na.action="na.omit", listw=prov.linkW, family="SAR")
summary(fert.SAR)
## Likelihood Ratio test (identical to LR from spautolm)
#(likeH0 <- logLik(fert.lm))                     # Use for unweighted model
likeH0 <- fert.fgls$logLikeH1
(likeH1 <- logLik(fert.SAR))
cat("chi-square value:  ", chi <- -2*(likeH0[1]-likeH1[1]))
cat("error-probability: ", pchisq(chi, df=1, lower.tail=F))
## Moran test applying randomization because ML may not be normal distributed
plot(neig.shp,axes=T,col=grey(0.9),border="white",
xlim=prov.bbox[1,],ylim=prov.bbox[2,])                        # first background
mapBiPolar(residuals(fert.SAR), prov.shp,                          # second regression residuals
neg.breaks=5, pos.breaks=4, break.value=0.0,
map.title="Fertility SAR Model Residuals",
legend.title="Residuals", legend.cex = 0.6,
add.to.map=T)
## Evaluate ML residuals for spatial autocorrelation
moran.mc(residuals(fert.SAR), prov.linkW, nsim=9999)
