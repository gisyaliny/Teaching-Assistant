biCol <- biPolarColorRamp(lmTrend3Resid,pos.breaks=4,neg.breaks=4)
pred.res <- gridDEM$ELEVATION-predTrend3$fit
n.col <- 5
pal <- rev(brewer.pal(n.col,"RdBu"))
seClass <- classIntervals(pred.res, n.col, style="equal")
seCol <- findColours(seClass,pal)
plot(gridDEM,axes=T,col=seCol,pch=15,cex=2,main="3rd Order Trend residual surface")
plot(river,col="blue",add=T)
legend("topleft", title = "Residual",
legend = leglabs(round(seClass$brks, digits = 0)), fill = pal,bty = "o", ncol = 1)
pred.res <- gridDEM$ELEVATION-predTrend3$fit
n.col <- 5
pal <- rev(brewer.pal(n.col,"RdBu"))
seClass <- classIntervals(pred.res, n.col, style="equal")
seCol <- findColours(seClass,pal)
plot(gridDEM,axes=T,col=seCol,pch=15,cex=2,main="3rd Order Trend residual surface")
plot(river,col="blue",add=T)
legend("topleft", title = "Residual",
legend = leglabs(round(seClass$brks, digits = 0)), fill = pal,bty = "o", ncol = 1)
predError <- gridDEM$ELEVATION - predFit
(RMSETrend <- sqrt(sum(predError^2)/length(predError)))
plot(obsElev,predFit,pch=".")  ## note granularity of observed elevation
title(main="Observed against Predicted Elevations")
abline(a=0,b=1)
## Evaluate possible bias
obsElev <- gridDEM$ELEVATION
summary(cbind(obsElev,predFit))
plot(obsElev,predFit,pch=".")  ## note granularity of observed elevation
title(main="Observed against Predicted Elevations")
abline(a=0,b=1)
## Evaluate spatial scale
boxDEM <- bbox(gridDEM)
(boxDEM[1,2]-boxDEM[1,1])  # x-coord range
(boxDEM[2,2]-boxDEM[2,1])  # y-coord range
## Model Variograms
vgm()  # vgm models in gstat
obsElev <- gridDEM$ELEVATION
plot(obsElev,predFit,pch=".")  ## note granularity of observed elevation
title(main="Observed against Predicted Elevations")
abline(a=0,b=1)
obsElev <- gridDEM$ELEVATION
plot(obsElev,predFit,pch=".")  ## note granularity of observed elevation
title(main="Observed against Predicted Elevations")
abline(a=0,b=1)
obsElev <- gridDEM$ELEVATION
plot(obsElev,predFit,pch=".")  ## note granularity of observed elevation
title(main="Observed against Predicted Elevations")
abline(a=0,b=1)
## Model Variograms
vgm()  # vgm models in gstat
show.vgms()
sampleDEM$sampleRes <- residuals(lmTrend3)     # add residuals to sampleDEM
samplePoints$sampleRes <- residuals(lmTrend3)     # add residuals to sampleDEM
## Make gstat object for simple Kriging
gPred <- gstat(id="simKrig", formula=sampleRes~1, beta=0, data=sampleDEM)
samplePoints$sampleRes <- residuals(lmTrend3)     # add residuals to sampleDEM
## Make gstat object for simple Kriging
gPred <- gstat(id="simKrig", formula=sampleRes~1, beta=0, data=samplePoints)
library(gstat)
samplePoints$sampleRes <- residuals(lmTrend3)     # add residuals to sampleDEM
## Make gstat object for simple Kriging
gPred <- gstat(id="simKrig", formula=sampleRes~1, beta=0, data=samplePoints)
library(gstat)
samplePoints$sampleRes <- residuals(lmTrend3)     # add residuals to sampleDEM
## Make gstat object for simple Kriging
gPred <- gstat(id="simKrig", formula=sampleRes~1, beta=0, data=samplePoints)
library(gstat)
samplePoints$sampleRes <- residuals(lmTrend3)     # add residuals to sampleDEM
## Make gstat object for simple Kriging
gPred <- gstat(id="simKrig", formula=sampleRes~1, beta=0, data=samplePoints)
## Select final variogram for simple kriging of residuals
varioFinal <- variogram(gPred, cutoff=150000, width=2000) # alternative: variogram(sampleRes~1,sampleDEM)
plot(varioFinal)
library(gstat)
samplePoints$sampleRes <- residuals(lmTrend3)     # add residuals to sampleDEM
## Make gstat object for simple Kriging
gPred <- gstat(id="simKrig", formula=sampleRes~1, beta=0, data=samplePoints)
## Select final variogram for simple kriging of residuals
varioFinal <- variogram(gPred, cutoff=150000, width=2000) # alternative: variogram(sampleRes~1,sampleDEM)
plot(varioFinal)
varioFit <- fit.variogram(varioFinal,model=vgm(model="Mat",range=150000,nugget=50))
plot(varioFinal,model=varioFit)
library(gstat)
samplePoints$sampleRes <- residuals(lmTrend3)     # add residuals to sampleDEM
## Make gstat object for simple Kriging
gPred <- gstat(id="simKrig", formula=sampleRes~1, beta=0, data=samplePoints)
## Select final variogram for simple kriging of residuals
varioFinal <- variogram(gPred, cutoff=150000, width=2000) # alternative: variogram(sampleRes~1,sampleDEM)
varioFit <- fit.variogram(varioFinal,model=vgm(model="Mat",range=150000,nugget=50))
plot(varioFinal,model=varioFit)
varioFit
library(gstat)
samplePoints$sampleRes <- residuals(lmTrend3)     # add residuals to sampleDEM
## Select final variogram for simple kriging of residuals
varioFinal <- variogram(sampleRes~1, data = samplePoints,cloud= F) # alternative: variogram(sampleRes~1,sampleDEM)
varioFit <- fit.variogram(varioFinal,model=vgm(model="Mat",range=150000,nugget=50))
plot(varioFinal,model=varioFit)
varioFit
library(gstat)
samplePoints$sampleRes <- residuals(lmTrend3)     # add residuals to sampleDEM
## Select final variogram for simple kriging of residuals
varioFinal <- variogram(sampleRes~1, data = samplePoints,cloud= F) # alternative: variogram(sampleRes~1,sampleDEM)
varioFit <- fit.variogram(varioFinal,model=vgm(model="Exp",range=150000,nugget=50))
plot(varioFinal,model=varioFit)
varioFit
library(gstat)
samplePoints$sampleRes <- residuals(lmTrend3)     # add residuals to sampleDEM
## Select final variogram for simple kriging of residuals
varioFinal <- variogram(sampleRes~1, data = samplePoints,cloud= F) # alternative: variogram(sampleRes~1,sampleDEM)
varioFit <- fit.variogram(varioFinal,model=vgm(model="Exp",range=50000,nugget=50))
plot(varioFinal,model=varioFit)
varioFit
library(gstat)
samplePoints$sampleRes <- residuals(lmTrend3)     # add residuals to sampleDEM
## Select final variogram for simple kriging of residuals
varioFinal <- variogram(sampleRes~1, data = samplePoints,cloud= F) # alternative: variogram(sampleRes~1,sampleDEM)
varioFit <- fit.variogram(varioFinal,model=vgm(model="Exp",range=50000,nugget=100))
plot(varioFinal,model=varioFit)
varioFit
library(gstat)
samplePoints$sampleRes <- residuals(lmTrend3)     # add residuals to sampleDEM
## Select final variogram for simple kriging of residuals
varioFinal <- variogram(sampleRes~1, data = samplePoints,cloud= F) # alternative: variogram(sampleRes~1,sampleDEM)
varioFit <- fit.variogram(varioFinal,model=vgm(model="Exp",range=150000,nugget=100))
plot(varioFinal,model=varioFit)
varioFit
varioFit
var(samplePoints$sampleRes)
varioFit
cat("Global variance is ",var(samplePoints$sampleRes))
varioFit
cat("Global variance is",var(samplePoints$sampleRes))
library(gstat)
samplePoints$sampleRes <- residuals(lmTrend3)     # add residuals to sampleDEM
## Select final variogram for simple kriging of residuals
varioFinal <- variogram(sampleRes~1, data = samplePoints,cloud= F) # alternative: variogram(sampleRes~1,sampleDEM)
varioFit <- fit.variogram(varioFinal,model=vgm(model="Exp",range=150000,nugget=200))
plot(varioFinal,model=varioFit)
varioFit
cat("Global variance is",var(samplePoints$sampleRes))
library(gstat)
samplePoints$sampleRes <- residuals(lmTrend3)     # add residuals to sampleDEM
## Select final variogram for simple kriging of residuals
varioFinal <- variogram(sampleRes~1, data = samplePoints,cloud= F) # alternative: variogram(sampleRes~1,sampleDEM)
varioFit <- fit.variogram(varioFinal,model=vgm(model="Exp",range=150000,nugget=500))
plot(varioFinal,model=varioFit)
varioFit
cat("Global variance is",var(samplePoints$sampleRes))
library(gstat)
samplePoints$sampleRes <- residuals(lmTrend3)     # add residuals to sampleDEM
gPred <- gstat(id="simKrig", formula=sampleRes~1, beta=0, data=sampleDEM)
library(gstat)
samplePoints$sampleRes <- residuals(lmTrend3)     # add residuals to sampleDEM
gPred <- gstat(id="simKrig", formula=sampleRes~1, beta=0, data=samplePoints)
## Select final variogram for simple kriging of residuals
varioFinal <- variogram(gPred, cutoff=150000, width=2000) # alternative: variogram(sampleRes~1,sampleDEM)
varioFit <- fit.variogram(varioFinal,model=vgm(model="Exp",range=150000,nugget=500))
plot(varioFinal,model=varioFit)
varioFit
cat("Global variance is",var(samplePoints$sampleRes))
predSimKrig <- predict(gPred, model=varioFit, newdata=gridDEM) # alternative: krige(sampleRes~1,sampleDEM, gridDEM, model=varioFit)
## Predicted Kriging residuals
predRes <- predSimKrig$simKrig.pred      # Kriging cell residual prediction
hist(predRes)
colRamp <- biPolarColorRamp(predRes, pos.breaks=4)
predSimKrig <- predict(gPred, model=varioFit, newdata=gridDEM) # alternative: krige(sampleRes~1,sampleDEM, gridDEM, model=varioFit)
## Predicted Kriging residuals
predRes <- predSimKrig$simKrig.pred      # Kriging cell residual prediction
hist(predRes)
cat("Mean of residual",mean(predRes))
shapiro.test(predRes)
predSimKrig <- predict(gPred, model=varioFit, newdata=gridDEM) # alternative: krige(sampleRes~1,sampleDEM, gridDEM, model=varioFit)
## Predicted Kriging residuals
predRes <- predSimKrig$simKrig.pred      # Kriging cell residual prediction
cat("Mean of residual",mean(predRes))
hist(predRes)
predSimKrig <- predict(gPred, model=varioFit, newdata=gridDEM) # alternative: krige(sampleRes~1,sampleDEM, gridDEM, model=varioFit)
## Predicted Kriging residuals
predRes <- predSimKrig$simKrig.pred      # Kriging cell residual prediction
cat("Mean of residual",mean(predRes))
norm_lst <- rnorm(length(predRes),mean = 0,sd = sd(predRes))
t.test(predRes,norm_lst)
predSimKrig <- predict(gPred, model=varioFit, newdata=gridDEM) # alternative: krige(sampleRes~1,sampleDEM, gridDEM, model=varioFit)
## Predicted Kriging residuals
predRes <- predSimKrig$simKrig.pred      # Kriging cell residual prediction
cat("Mean of residual",mean(predRes))
norm_lst <- rnorm(length(predRes),mean = 0,sd = sd(predRes))
t.test(predRes,norm_lst)
## Plot Predicted Kring elevation
pts <- list("sp.points", samplePoints, pch=12, col="black", cex=0.5)
spplot(predRes, zcol="simKrig.pred", col.regions=terrain.colors(20), cuts=19,
sp.layout=list(pts), contour=T, labels=FALSE, pretty=TRUE, col="brown",
main="Kriging with 3rd order trend surface")
## Plot Predicted Kring elevation
pts <- list("sp.points", samplePoints, pch=12, col="black", cex=0.5)
spplot(predSimKrig, zcol="simKrig.pred", col.regions=terrain.colors(20), cuts=19,
sp.layout=list(pts), contour=T, labels=FALSE, pretty=TRUE, col="brown",
main="Kriging with 3rd order trend surface")
## Plot Predicted Kring elevation
pts <- list("sp.points", samplePoints, pch=12, col="black", cex=0.5)
spplot(predSimKrig, zcol="simKrig.pred", col.regions=terrain.colors(5), cuts=19,
sp.layout=list(pts), contour=T, labels=FALSE, pretty=TRUE, col="brown",
main="Kriging with 3rd order trend surface")
biPolarColorRamp <- function(varName,pos.breaks=4,neg.breaks=pos.breaks) {
require(RColorBrewer); require(classInt)
## define breaks and color assignment
q.neg.breaks <- classIntervals((varName[varName < 0]), n=neg.breaks, style="quantile")
q.pos.breaks <- classIntervals((varName[varName > 0]), n=pos.breaks, style="quantile")
qBreaks <- c(q.neg.breaks$brks[-(neg.breaks+1)],0,q.pos.breaks$brks[-1])     # combine neg and pos over zero
pal.neg <- brewer.pal(neg.breaks, "Blues")
pal.pos <- brewer.pal(pos.breaks, "Reds")
colPal <- c(rev(pal.neg),pal.pos)                                                # combine palettes
mapCol <- colPal[findInterval(varName,qBreaks,rightmost.closed=T)]
return(list(mapCol=mapCol,qBreaks=qBreaks,colPal=colPal))
} # end:biPolarColorRamp
plot(gridDEM, axes=T, col=colRamp$mapCol, pch=15, cex=1)
?colRamp
??colRamp
library(RColorBrewer)
plot(gridDEM, axes=T, col=colRamp$mapCol, pch=15, cex=1)
library(RColorBrewer)
colRamp <- biPolarColorRamp(predRes, pos.breaks=4)
plot(gridDEM, axes=T, col=colRamp$mapCol, pch=15, cex=1)
plot(river,col="blue",add=T)
plot(sampleDEM,col="green",add=T)
library(RColorBrewer)
colRamp <- biPolarColorRamp(predRes, pos.breaks=4)
plot(gridDEM, axes=T, col=colRamp$mapCol, pch=15, cex=1)
plot(river,col="blue",add=T)
plot(samplePoints,col="green",add=T)
legend("topright", title="Residuals", legend=leglabs(round(colRamp$qBreaks,2)),
fill=colRamp$colPal, bg="white",ncol=1)
title("Predicted Simple Kriging Residuals")
library(RColorBrewer)
colRamp <- biPolarColorRamp(predRes, pos.breaks=4)
plot(gridDEM, axes=T, col=colRamp$mapCol, pch=15, cex=1)
plot(river,col="blue",add=T)
plot(samplePoints,col="green",add=T)
legend("topright", title="Residuals", legend=leglabs(round(colRamp$qBreaks,2)),
fill=colRamp$colPal, bg="white",ncol=1)
title("Predicted Simple Kriging Residuals")
residuals(lmTrend3)
library(gstat)
samplePoints$sampleRes <- residuals(lmTrend3)     # add residuals to sampleDEM
gPred <- gstat(id="simKrig", formula=sampleRes~1, beta=0, data=samplePoints)
## Select final variogram for simple kriging of residuals
varioFinal <- variogram(gPred, cutoff=150000, width=2000) # alternative: variogram(sampleRes~1,sampleDEM)
varioFit <- fit.variogram(varioFinal,model=vgm(model="Exp",range=150000,nugget=500))
plot(varioFinal,model=varioFit)
## Predict the residuals
gPred <- gstat(id="simKrig",gPred, model=varioFit)
predSimKrig <- predict(gPred, model=varioFit, newdata=gridDEM) # alternative: krige(sampleRes~1,sampleDEM, gridDEM, model=varioFit)
## Predicted Kriging residuals
predRes <- predSimKrig$simKrig.pred      # Kriging cell residual prediction
cat("Mean of residual",mean(predRes))
norm_lst <- rnorm(length(predRes),mean = 0,sd = sd(predRes))
t.test(predRes,norm_lst)
cat("Mean of residual",mean(predSimKrig))
predSimKrig
predSimKrig$simKrig.pred
## Predict the residuals
gPred <- gstat(id="simKrig",gPred, model=varioFit)
predSimKrig <- predict(gPred, model=varioFit, newdata=gridDEM) # alternative: krige(sampleRes~1,sampleDEM, gridDEM, model=varioFit)
## Predicted Kriging residuals
predRes <- predSimKrig$simKrig.pred      # Kriging cell residual prediction
hist(predRes)
biPolarColorRamp <- function(varName,pos.breaks=4,neg.breaks=pos.breaks) {
require(RColorBrewer); require(classInt)
## define breaks and color assignment
q.neg.breaks <- classIntervals((varName[varName < 0]), n=neg.breaks, style="quantile")
q.pos.breaks <- classIntervals((varName[varName > 0]), n=pos.breaks, style="quantile")
qBreaks <- c(q.neg.breaks$brks[-(neg.breaks+1)],0,q.pos.breaks$brks[-1])     # combine neg and pos over zero
pal.neg <- brewer.pal(neg.breaks, "Blues")
pal.pos <- brewer.pal(pos.breaks, "Reds")
colPal <- c(rev(pal.neg),pal.pos)                                                # combine palettes
mapCol <- colPal[findInterval(varName,qBreaks,rightmost.closed=T)]
return(list(mapCol=mapCol,qBreaks=qBreaks,colPal=colPal))
} # end:biPolarColorRamp
library(RColorBrewer)
colRamp <- biPolarColorRamp(predRes, pos.breaks=4)
plot(gridDEM, axes=T, col=colRamp$mapCol, pch=15, cex=1)
plot(river,col="blue",add=T)
plot(samplePoints,col="green",add=T)
legend("topright", title="Residuals", legend=leglabs(round(colRamp$qBreaks,2)),
fill=colRamp$colPal, bg="white",ncol=1)
title("Predicted Simple Kriging Residuals")
mean(predRes)
hist(predRes)
mean(predRes)
hist(predRes)
## Map kriging prediciton standard error
seRes <- sqrt(predSimKrig$simKrig.var)       # Standard errors of Kriging Residuals
seHist<- hist(seRes)
breakptsSe <- seHist$breaks
nclSe <- length(breakptsSe)-1
palSe <- rev(heat.colors(nclSe))
colsSe <- palSe[findInterval(seRes,
breakptsSe,rightmost.closed=T)]
plot(gridDEM, axes=T, col=colsSe, pch=15,cex=1)
plot(river,col="blue",add=T)
plot(sampleDEM,col="red",add=T)
## Map kriging prediciton standard error
seRes <- sqrt(predSimKrig$simKrig.var)       # Standard errors of Kriging Residuals
seHist<- hist(seRes)
breakptsSe <- seHist$breaks
nclSe <- length(breakptsSe)-1
palSe <- rev(heat.colors(nclSe))
colsSe <- palSe[findInterval(seRes,
breakptsSe,rightmost.closed=T)]
plot(gridDEM, axes=T, col=colsSe, pch=15,cex=1)
plot(river,col="blue",add=T)
plot(samplePoints,col="red",add=T)
legend("topright", title="Predicted DEM",legend=leglabs(round(breakptsSe,2)),
fill=palSe,bg="white",ncol=1)
title("Standard Errors of Kriging Residuals")
## Map kriging prediciton standard error
seRes <- sqrt(predSimKrig$simKrig.var)       # Standard errors of Kriging Residuals
seHist<- hist(seRes)
breakptsSe <- seHist$breaks
nclSe <- length(breakptsSe)-1
palSe <- rev(heat.colors(nclSe))
colsSe <- palSe[findInterval(seRes,
breakptsSe,rightmost.closed=T)]
plot(gridDEM, axes=T, col=colsSe, pch=15,cex=1)
plot(river,col="blue",add=T)
plot(samplePoints,col="red",add=T)
legend("topright", title="Predicted DEM",legend=leglabs(round(breakptsSe,2)),
fill=palSe,bg="white",ncol=1)
title("Standard Errors of Kriging Residuals")
## Map kriging prediciton standard error
seRes <- sqrt(predSimKrig$simKrig.var)       # Standard errors of Kriging Residuals
seHist<- hist(seRes)
breakptsSe <- seHist$breaks
nclSe <- length(breakptsSe)-1
palSe <- rev(heat.colors(nclSe))
colsSe <- palSe[findInterval(seRes,
breakptsSe,rightmost.closed=T)]
plot(gridDEM, axes=T, col=colsSe, pch=15,cex=1)
plot(river,col="blue",add=T)
plot(samplePoints,col="green",pch = 18,add=T)
legend("topright", title="Predicted DEM",legend=leglabs(round(breakptsSe,2)),
fill=palSe,bg="white",ncol=1)
title("Standard Errors of Kriging Residuals")
## Map kriging prediciton standard error
seRes <- sqrt(predSimKrig$simKrig.var)       # Standard errors of Kriging Residuals
seHist<- hist(seRes)
breakptsSe <- seHist$breaks
nclSe <- length(breakptsSe)-1
palSe <- rev(heat.colors(nclSe))
colsSe <- palSe[findInterval(seRes,
breakptsSe,rightmost.closed=T)]
plot(gridDEM, axes=T, col=colsSe, pch=15,cex=1)
plot(river,col="blue",add=T)
plot(samplePoints,col="green",pch = 18,add=T)
legend("topright", title="Predicted DEM",legend=leglabs(round(breakptsSe,2)),
fill=palSe,bg="white",ncol=1)
title("Standard Errors of Kriging Residuals")
fitTot <- predFit+predRes                          # Total predicted cell value
seTot <- sqrt(predSe^2+predSimKrig$simKrig.var)    # Total cell prediction standard error
## Map overall prediciton surface
fitHist<- hist(fitTot,freq=F)
lines(density(gridDEM$ELEVATION),col="red",lwd=2)
breakptsFit <- fitHist$breaks
nclFit <- length(breakptsFit)-1
palFit <- terrain.colors(nclFit)
colsFit <- palFit[findInterval(fitTot,
breakptsFit,rightmost.closed=T)]
plot(gridDEM, axes=T, col=colsFit, pch=15,cex=1)
plot(river,col="blue",add=T)
plot(sampleDEM,col="red",add=T)
fitTot <- predFit+predRes                          # Total predicted cell value
seTot <- sqrt(predSe^2+predSimKrig$simKrig.var)    # Total cell prediction standard error
## Map overall prediciton surface
fitHist<- hist(fitTot,freq=F)
lines(density(gridDEM$ELEVATION),col="red",lwd=2)
breakptsFit <- fitHist$breaks
nclFit <- length(breakptsFit)-1
palFit <- terrain.colors(nclFit)
colsFit <- palFit[findInterval(fitTot,
breakptsFit,rightmost.closed=T)]
plot(gridDEM, axes=T, col=colsFit, pch=15,cex=1)
plot(river,col="blue",add=T)
plot(samplePoints,col="red",add=T)
legend("topright", title="Predicted DEM",legend=leglabs(round(breakptsFit,2)),
fill=palFit,bg="white",ncol=1)
title("Prediction Surface: Trend (3rd)\nplus Kriging Residuals")
fitTot <- predFit+predRes                          # Total predicted cell value
seTot <- sqrt(predSe^2+predSimKrig$simKrig.var)    # Total cell prediction standard error
## Map overall prediciton surface
fitHist<- hist(fitTot,freq=F)
lines(density(gridDEM$ELEVATION),col="red",lwd=2)
breakptsFit <- fitHist$breaks
nclFit <- length(breakptsFit)-1
palFit <- terrain.colors(nclFit)
colsFit <- palFit[findInterval(fitTot,
breakptsFit,rightmost.closed=T)]
plot(gridDEM, axes=T, col=colsFit, pch=15,cex=1)
plot(river,col="blue",add=T)
plot(samplePoints,col="red",add=T)
legend("topright", title="Predicted DEM",legend=leglabs(round(breakptsFit,2)),
fill=palFit,bg="white",ncol=1)
title("Prediction Surface: Trend (3rd) plus Kriging Residuals")
fitTot <- predFit+predRes                          # Total predicted cell value
seTot <- sqrt(predSe^2+predSimKrig$simKrig.var)    # Total cell prediction standard error
## Map overall prediciton surface
fitHist<- hist(fitTot,freq=F)
lines(density(gridDEM$ELEVATION),col="red",lwd=2)
breakptsFit <- fitHist$breaks
nclFit <- length(breakptsFit)-1
palFit <- terrain.colors(nclFit)
colsFit <- palFit[findInterval(fitTot,
breakptsFit,rightmost.closed=T)]
plot(gridDEM, axes=T, col=colsFit, pch=15,cex=1)
plot(river,col="blue",add=T)
plot(samplePoints,col="red",add=T)
legend("topright", title="Predicted DEM",legend=leglabs(round(breakptsFit,2)),
fill=palFit,bg="white",ncol=1)
title("Prediction Surface: Trend (3rd) plus Kriging Residuals")
fitTot <- predFit+predRes                          # Total predicted cell value
seTot <- sqrt(predSe^2+predSimKrig$simKrig.var)    # Total cell prediction standard error
## Map overall prediciton surface
fitHist<- hist(fitTot,freq=F)
lines(density(gridDEM$ELEVATION),col="red",lwd=2)
breakptsFit <- fitHist$breaks
nclFit <- length(breakptsFit)-1
palFit <- terrain.colors(nclFit)
colsFit <- palFit[findInterval(fitTot,
breakptsFit,rightmost.closed=T)]
fitTot <- predFit+predRes                          # Total predicted cell value
seTot <- sqrt(predSe^2+predSimKrig$simKrig.var)    # Total cell prediction standard error
## Map overall prediciton surface
fitHist<- hist(fitTot,freq=F)
lines(density(gridDEM$ELEVATION),col="red",lwd=2)
breakptsFit <- fitHist$breaks
nclFit <- length(breakptsFit)-1
palFit <- terrain.colors(nclFit)
colsFit <- palFit[findInterval(fitTot,
breakptsFit,rightmost.closed=T)]
plot(gridDEM, axes=T, col=colsFit, pch=15,cex=1)
plot(river,col="blue",add=T)
plot(samplePoints,col="red",add=T)
legend("topright", title="Predicted DEM",legend=leglabs(round(breakptsFit,2)),
fill=palFit,bg="white",ncol=1)
title("Prediction Surface: Trend (3rd) plus Kriging Residuals")
## Map overall prediciton standard error
seHist<- hist(seTot)
breakptsSe <- seHist$breaks
nclSe <- length(breakptsSe)-1
palSe <- rev(heat.colors(nclSe))
colsSe <- palSe[findInterval(seTot,
breakptsSe,rightmost.closed=T)]
## Map overall prediciton standard error
seHist<- hist(seTot)
breakptsSe <- seHist$breaks
nclSe <- length(breakptsSe)-1
palSe <- rev(heat.colors(nclSe))
colsSe <- palSe[findInterval(seTot,
breakptsSe,rightmost.closed=T)]
plot(gridDEM, axes=T, col=colsSe, pch=15,cex=1)
plot(river,col="blue",add=T)
plot(samplePoints,col="red",add=T)
legend("topright", title="Prediction STD. Error",legend=leglabs(round(breakptsSe,2)),
fill=palSe,bg="white",ncol=1)
title("Prediction Standard Errors of 3rd Order DEM Surface\nplus Kriging Residuals")
plot(gridDEM, axes=T, col=colsSe, pch=15,cex=1)
plot(river,col="blue",add=T)
plot(samplePoints,col="red",add=T)
legend("topright", title="Prediction STD. Error",legend=leglabs(round(breakptsSe,2)),
fill=palSe,bg="white",ncol=1)
title("Prediction Standard Errors of 3rd Order DEM Surface plus Kriging Residuals")
predError <- gridDEM$ELEVATION - fitTot
(RMSETotal <- sqrt(sum(predError^2)/length(predError)))
colRamp <- biPolarColorRamp(predError,pos.breaks=6)
colsError <- colRamp$mapCol
plot(gridDEM, axes=T, col=colsError, pch=15,cex=1)
plot(river,col="blue",add=T)
plot(sampleDEM,col="green",add=T)
colRamp <- biPolarColorRamp(predError,pos.breaks=6)
colsError <- colRamp$mapCol
plot(gridDEM, axes=T, col=colsError, pch=15,cex=1)
plot(river,col="blue",add=T)
plot(samplePoints,col="green",add=T)
legend("topright", title="Prediction Error",legend=leglabs(round(colRamp$qBreaks,2)),
fill=colRamp$colPal,bg="white",ncol=1)
title("Prediciton Error of 3rd Order Trends with Kriging Residuals Model")
n.col <- 5
pal <- rev(brewer.pal(n.col,"RdBu"))
seClass <- classIntervals(pred.res, n.col, style="equal")
seCol <- findColours(seClass,pal)
plot(gridDEM,axes=T,col=seCol,pch=15,cex=2,
main="3rd Order Trend residual surface")
plot(river,col="blue",add=T)
legend("topleft", title = "Residual",
legend = leglabs(round(seClass$brks, digits = 0)), fill = pal, bty = "o", ncol = 1)
n.col <- 5
pal <- rev(brewer.pal(n.col,"RdBu"))
seClass <- classIntervals(pred.res, n.col, style="equal")
seCol <- findColours(seClass,pal)
plot(gridDEM,axes=T,col=seCol,pch=15,cex=2,
main="3rd Order Trend residual surface")
plot(river,col="blue",add=T)
legend("topleft", title = "Residual",
legend = leglabs(round(seClass$brks, digits = 0)), fill = pal, bty = "o", ncol = 1)
n.col <- 5
pal <- rev(brewer.pal(n.col,"RdBu"))
seClass <- classIntervals(predError, n.col, style="equal")
seCol <- findColours(seClass,pal)
plot(gridDEM,axes=T,col=seCol,pch=15,cex=2,
main="3rd Order Trend residual surface")
plot(river,col="blue",add=T)
legend("topleft", title = "Residual",
legend = leglabs(round(seClass$brks, digits = 0)), fill = pal, bty = "o", ncol = 1)
