View(MyPower)
library(foreign)
Concord <- read.spss('Concord1.sav', to.data.frame=TRUE)
load('MyPower.RData')
data(Mroz, package="carData")
CPS1985 <- read.dbf('CPS1985.dbf')
force(Mroz)
View(Concord)
methods(summary).
methods(summary).
methods(summary)
?methods
x <- c(1,3,5,7,9,NA)
x * 2; x + 2
y <- seq(0,2, by=1); x * y
z <- rep(c(1,2),3); x * z
x[c(T,T,T,T,T,F)]
?seq
data(Mroz, package="carData")
data(Mroz, package="carData")
?rep
load('MyPower.RData')
library(foreign)
Concord <- read.spss('Concord1.sav', to.data.frame=TRUE)
CPS1985 <- read.dbf('CPS1985.dbf')
data(Mroz, package="carData")
# MyPower$DailykWh <- MyPower$DaysBill / MyPower$kWhBill
MyPower$DailykWh <- MyPower$kWhBill/ MyPower$DaysBill
MyPowerNames <- names(MyPower)
(length(MyPowerNames))
(MyPowerNames[4:6])
sapply(MyPower, is.factor)
str(MyPower)
?str
plot(DailykWh~SeqID, data=MyPower)
abline( lm(DailykWh~SeqID, data=MyPower) )
lm(DailykWh~SeqID, data=MyPower)
plot(DailykWh~Month, data=MyPower)
subset(MyPower[,4:6],MyPower$Month=="JAN")
head(MyPower)
tail(MyPower)
summary(MyPower)
summary(lm(DailykWh~SeqID, data=MyPower))
?summary.lm
?summary.data.frame
x <- c(1,3,5,7,9,NA)
x * 2; x + 2
y <- seq(0,2, by=1); x * y
z <- rep(c(1,2),3); x * z
x[c(T,T,T,T,T,F)]
myMean <- function(x){
x <- na.omit(x)
sum(x)/length(x)
}
myMean(x)
mean(na.omit(x))
MyPower[MyPower$Month=="JAN",c("MinTemp","AveTemp","MaxTemp")]
MyPower[MyPower$Month=="JAN",c("MinTemp","AveTemp","MaxTemp")]
head(MyPower)
head(MyPower)
?head
knitr::opts_chunk$set(echo=TRUE, width=7.2)
library(tidyverse)
install.packages("tidyverse")
knitr::opts_chunk$set(echo=TRUE, width=7.2)
library(tidyverse)
knitr::opts_chunk$set(echo=TRUE, width=7.2)
library(tidyverse)
install.packages("vctrs")
knitr::opts_chunk$set(echo=TRUE, width=7.2)
library(tidyverse)
install.packages("backports")
knitr::opts_chunk$set(echo=TRUE, width=7.2)
library(tidyverse)
library("gcookbook")
library(nycflights13)
knitr::opts_chunk$set(echo=TRUE, width=7.2)
library(tidyverse)
library("gcookbook")
library(nycflights13)
climate_sub <- climate %>% filter(Source == "Berkeley" & Year >= 1900) %>%
mutate(pos=Anomaly10y >= 0)
ggplot(climate_sub, aes(x=Year, y=Anomaly10y, fill=pos)) +
geom_col(position="identity", colour="black", size=0.25) +
scale_fill_manual(values = c("#CCEEFF","#FFDDDD"), guide=FALSE)
library(MASS)
biopsy_mod <- biopsy %>% mutate(classn = recode(class, benign=0, malignant=1))
ggplot(biopsy_mod, aes(x=V1, y=classn))+
geom_point(position=position_jitter(width=0.3, height=0.06), alpha=0.4, shape=21, size=1.5)+
stat_smooth(method=glm, method.args=list(family=binomial))
library(MASS)
biopsy_mod <- biopsy %>% mutate(classn = recode(class, benign=0, malignant=1))
ggplot(biopsy_mod, aes(x=V1, y=classn))+
geom_point(position=position_jitter(width=0.3, height=0.06), alpha=0.4, shape=21, size=1.5)+
stat_smooth(method=glm, method.args=list(family=binomial))
ggplot(heightweight, aes(x=sex, y=heightIn)) +
geom_boxplot(outlier.colour = NA, width= 0.4)+
geom_dotplot(binaxis = "y", binwidth = 0.5, stackdir = "center", fill=NA)
ggplot(faithful, aes(x=eruptions, y=waiting))+
geom_point()+
stat_density2d(aes(alpha=..density..), geom="tile", contour = FALSE)
library(scales)
ggplot(heightweight, aes(x=ageYear, y=heightIn, colour=weightLb))+
geom_point(size=3)+
scale_colour_gradientn(colours = c("darkred","orange","yellow","white"))
library(maps)
install.packages("maps")
library(maps)
library(mapproj)
install.packages("mapproj")
library(maps)
library(mapproj)
states_map <- map_data("state")
crimes <- data.frame(state=tolower(rownames(USArrests)),USArrests)
crime_map <- merge(states_map, crimes, by.x="region", by.y="state")
qa <- quantile(crimes$Assault, seq(0,1,by=0.2))
crimes$Assault_q <- cut(crimes$Assault, qa, labels=c("0-20%","20-40%","40-60%","60-80%","80-100%"),
include.lowest = TRUE)
pal <- colorRampPalette(c("#559999","grey80","#BB650B"))(5)
ggplot(crimes, aes(map_id=state, fill=Assault_q))+
geom_map(map=states_map, color="black")+
scale_fill_manual(values=pal)+
expand_limits(x=states_map$long, y=states_map$lat)+
coord_map("polyconic")+
labs(fill="Assault Rate\nPercentile")
library(nycflights13)
str(flights)
library(DallasTracts)
install.packages("DallasTracts")
install.packages("TexMix")
library(DallasTracts)
library(DallasTracts)
install.packages("DallasTracts")
clear()
library(rgdal)
library(TexMix)
#Get polygons of neighboring countries
neig.shp <- readOGR(dsn="./Italy",layer = "Neighbors", integer64 =
"allow.loss")
#Get polygons of Italy provinces
Italy.shp <- readOGR(dsn="./Italy",layer = "Provinces", integer64 =
"allow.loss")
Italy.bbox <- bbox(Italy.shp)
plot(neig.shp,axes = T,col=grey(0.9),border = "white", xlim=Italy.bbox[1,],
ylim=Italy.bbox[2,])
mapColorQual(Italy.shp$REGION, Italy.shp,
map.title="Region Map of Italy",
legend.title = "Regions",add.to.map=T)
library(rgdal)
library(TexMix)
#Get polygons of neighboring countries
neig.shp <- readOGR(dsn="./Italy",layer = "Neighbors", integer64 = "allow.loss")
#Get polygons of Italy provinces
Italy.shp <- readOGR(dsn="./Italy",layer = "Provinces", integer64 = "allow.loss")
Italy.bbox <- bbox(Italy.shp)
plot(neig.shp,axes = T,col=grey(0.9),border = "white", xlim=Italy.bbox[1,], ylim=Italy.bbox[2,])
mapColorQual(Italy.shp$REGION, Italy.shp, map.title="Region Map of Italy", legend.title = "Regions",add.to.map=T)
?mapColorQual
Italy.shp$REGION
library(rgdal)
library(TexMix)
#Get polygons of neighboring countries
neig.shp <- readOGR(dsn="./Italy",layer = "Neighbors", integer64 = "allow.loss")
#Get polygons of Italy provinces
Italy.shp <- readOGR(dsn="./Italy",layer = "Provinces", integer64 = "allow.loss")
Italy.bbox <- bbox(Italy.shp)
plot(neig.shp,axes = T,col=grey(0.9),border = "white", xlim=Italy.bbox[1,], ylim=Italy.bbox[2,])
mapColorQual(as.factor(Italy.shp$REGION), Italy.shp, map.title="Region Map of Italy", legend.title = "Regions",add.to.map=T)
library(rgdal)
library(TexMix)
#Get polygons of neighboring countries
neig.shp <- readOGR(dsn="./Italy",layer = "Neighbors", integer64 = "allow.loss")
#Get polygons of Italy provinces
Italy.shp <- readOGR(dsn="./Italy",layer = "Provinces", integer64 = "allow.loss")
Italy.bbox <- bbox(Italy.shp)
plot(neig.shp,axes = T,col=grey(0.9),border = "white", xlim=Italy.bbox[1,], ylim=Italy.bbox[2,])
mapColorQual(as.factor(Italy.shp$REGION), Italy.shp, map.title="Region Map of Italy", legend.title = "Regions",add.to.map=T)
library(rgdal)
library(TexMix)
#Get polygons of neighboring countries
neig.shp <- readOGR(dsn="./Italy",layer = "Neighbors", integer64 = "allow.loss")
#Get polygons of Italy provinces
Italy.shp <- readOGR(dsn="./Italy",layer = "Provinces", integer64 = "allow.loss")
Italy.bbox <- bbox(Italy.shp)
plot(neig.shp,axes = T,col=grey(0.9),border = "white", xlim=Italy.bbox[1,], ylim=Italy.bbox[2,])
mapColorQual(as.factor(Italy.shp$REGION), Italy.shp, map.title="Region Map of Italy", legend.title = "Regions",add.to.map=T)
plot(neig.shp,axes=T,col=grey(0.9),border="white",
xlim=Italy.bbox[1,], ylim=Italy.bbox[2,])
# addToMap=T over-plots provinces over neighbors
mapColorRamp(Italy.shp$TOTFERTRAT,Italy.shp, breaks=7,
map.title="Italy Fertility Rate ", legend.title="Fertility Rate",add.to.map=T, legend.cex=0.7)
plot(neig.shp,axes=T,col=grey(0.9),border="white",
xlim=Italy.bbox[1,], ylim=Italy.bbox[2,])
# addToMap=T over-plots provinces over neighbors
mapColorRamp(Italy.shp$TOTFERTRAT,Italy.shp, breaks=7,
map.title="Italy Fertility Rate ", legend.title="Fertility Rate",add.to.map=T, legend.cex=0.7)
plot(neig.shp,axes=T,col=grey(0.9),border="white",
xlim=Italy.bbox[1,], ylim=Italy.bbox[2,])
# addToMap=T over-plots provinces over neighbors
mapColorRamp(Italy.shp$TOTFERTRAT,Italy.shp, breaks=7,
map.title="Italy Fertility Rate ", legend.title="Fertility Rate",add.to.map=T, legend.cex=0.7)
Italy.shp$logMigRatio <- log(Italy.shp$INFLOW/Italy.shp$OUTFLOW)
hist(Italy.shp$logMigRatio)
plot(neig.shp,axes=T,col=grey(0.9),border="white",
xlim=Italy.bbox[1,], ylim=Italy.bbox[2,])
sum(Italy.shp$logMigRatio <= 0)
sum(Italy.shp$logMigRatio >= 0)
mapBiPolar(Italy.shp$logMigRatio, Italy.shp,
neg.breaks=3, pos.breaks=5, break.value=0,
map.title="Italy Migration Ratio",
legend.title="Ratio",add.to.map=T,
legend.cex=0.7)
mapBiPolar(Italy.shp$logMigRatio, Italy.shp, neg.breaks=3, pos.breaks=5, break.value=0,
map.title="Italy Migration Ratio", legend.title="Ratio",add.to.map=T, legend.cex=0.7)
mapBiPolar(Italy.shp$logMigRatio, Italy.shp, neg.breaks=3, pos.breaks=5, break.value=0,
map.title="Italy Migration Ratio", legend.title="Ratio",add.to.map=T, legend.cex=0.7)
plot(neig.shp,axes=T,col=grey(0.9),border="white",
xlim=Italy.bbox[1,], ylim=Italy.bbox[2,])
# addToMap=T over-plots provinces over neighbors
mapColorRamp(Italy.shp$TOTFERTRAT,Italy.shp, breaks=7,
map.title="Italy Fertility Rate ", legend.title="Fertility Rate",add.to.map=T, legend.cex=0.7)
plot(neig.shp,axes=T,col=grey(0.9),border="white",
xlim=Italy.bbox[1,], ylim=Italy.bbox[2,])
# addToMap=T over-plots provinces over neighbors
mapColorRamp(Italy.shp$TOTFERTRAT,Italy.shp, breaks=7,
map.title="Italy Fertility Rate ", legend.title="Fertility Rate",add.to.map=T, legend.cex=0.7)
mapBiPolar(Italy.shp$logMigRatio, Italy.shp, neg.breaks=3, pos.breaks=5, break.value=0,
map.title="Italy Migration Ratio", legend.title="Ratio",add.to.map=T, legend.cex=0.7)
plot(neig.shp,axes=T,col=grey(0.9),border="white",xlim=Italy.bbox[1,], ylim=Italy.bbox[2,])
mapBiPolar(Italy.shp$logMigRatio, Italy.shp, neg.breaks=3, pos.breaks=5, break.value=0,
map.title="Italy Migration Ratio", legend.title="Ratio",add.to.map=T, legend.cex=0.7)
plot(neig.shp,axes=T,col=grey(0.9),border="white",xlim=Italy.bbox[1,], ylim=Italy.bbox[2,])
mapBiPolar(Italy.shp$logMigRatio, Italy.shp, neg.breaks=3, pos.breaks=5, break.value=0,
map.title="Italy Migration Ratio", legend.title="Ratio",add.to.map=T, legend.cex=0.7)
Italy.shp$logMigRatio <- log(Italy.shp$INFLOW/Italy.shp$OUTFLOW)
hist(Italy.shp$logMigRatio)
Italy.shp$logMigRatio <- log(Italy.shp$INFLOW/Italy.shp$OUTFLOW)
hist(Italy.shp$logMigRatio)
sum(Italy.shp$logMigRatio <= 0)
sum(Italy.shp$logMigRatio >= 0)
plot(neig.shp,axes=T,col=grey(0.9),border="white",xlim=Italy.bbox[1,], ylim=Italy.bbox[2,])
mapBiPolar(Italy.shp$logMigRatio, Italy.shp, neg.breaks=3, pos.breaks=5, break.value=0,
map.title="Italy Migration Ratio", legend.title="Ratio",add.to.map=T, legend.cex=0.7)
